
stm32-sa2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002030  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08002160  08002160  00012160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002578  08002578  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002578  08002578  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002578  08002578  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002578  08002578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800257c  0800257c  0001257c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002580  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000008  08002588  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08002588  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003610  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b44  00000000  00000000  00023641  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000388  00000000  00000000  00024188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000310  00000000  00000000  00024510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001059b  00000000  00000000  00024820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002da4  00000000  00000000  00034dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00055c60  00000000  00000000  00037b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008d7bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ca0  00000000  00000000  0008d83c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08002148 	.word	0x08002148

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08002148 	.word	0x08002148

08000170 <__popcountsi2>:
 8000170:	0843      	lsrs	r3, r0, #1
 8000172:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000176:	1ac0      	subs	r0, r0, r3
 8000178:	0883      	lsrs	r3, r0, #2
 800017a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800017e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000182:	4418      	add	r0, r3
 8000184:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000188:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 800018c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000190:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000194:	0e00      	lsrs	r0, r0, #24
 8000196:	4770      	bx	lr

08000198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__NVIC_GetPriorityGrouping+0x18>)
 800019e:	68db      	ldr	r3, [r3, #12]
 80001a0:	0a1b      	lsrs	r3, r3, #8
 80001a2:	f003 0307 	and.w	r3, r3, #7
}
 80001a6:	4618      	mov	r0, r3
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	e000ed00 	.word	0xe000ed00

080001b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	db0b      	blt.n	80001de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	f003 021f 	and.w	r2, r3, #31
 80001cc:	4906      	ldr	r1, [pc, #24]	; (80001e8 <__NVIC_EnableIRQ+0x34>)
 80001ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d2:	095b      	lsrs	r3, r3, #5
 80001d4:	2001      	movs	r0, #1
 80001d6:	fa00 f202 	lsl.w	r2, r0, r2
 80001da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	e000e100 	.word	0xe000e100

080001ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	db0a      	blt.n	8000216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	b2da      	uxtb	r2, r3
 8000204:	490c      	ldr	r1, [pc, #48]	; (8000238 <__NVIC_SetPriority+0x4c>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	0112      	lsls	r2, r2, #4
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	440b      	add	r3, r1
 8000210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000214:	e00a      	b.n	800022c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4908      	ldr	r1, [pc, #32]	; (800023c <__NVIC_SetPriority+0x50>)
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	f003 030f 	and.w	r3, r3, #15
 8000222:	3b04      	subs	r3, #4
 8000224:	0112      	lsls	r2, r2, #4
 8000226:	b2d2      	uxtb	r2, r2
 8000228:	440b      	add	r3, r1
 800022a:	761a      	strb	r2, [r3, #24]
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	e000e100 	.word	0xe000e100
 800023c:	e000ed00 	.word	0xe000ed00

08000240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000240:	b480      	push	{r7}
 8000242:	b089      	sub	sp, #36	; 0x24
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	f003 0307 	and.w	r3, r3, #7
 8000252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000254:	69fb      	ldr	r3, [r7, #28]
 8000256:	f1c3 0307 	rsb	r3, r3, #7
 800025a:	2b04      	cmp	r3, #4
 800025c:	bf28      	it	cs
 800025e:	2304      	movcs	r3, #4
 8000260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	3304      	adds	r3, #4
 8000266:	2b06      	cmp	r3, #6
 8000268:	d902      	bls.n	8000270 <NVIC_EncodePriority+0x30>
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	3b03      	subs	r3, #3
 800026e:	e000      	b.n	8000272 <NVIC_EncodePriority+0x32>
 8000270:	2300      	movs	r3, #0
 8000272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000274:	f04f 32ff 	mov.w	r2, #4294967295
 8000278:	69bb      	ldr	r3, [r7, #24]
 800027a:	fa02 f303 	lsl.w	r3, r2, r3
 800027e:	43da      	mvns	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	401a      	ands	r2, r3
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000288:	f04f 31ff 	mov.w	r1, #4294967295
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	fa01 f303 	lsl.w	r3, r1, r3
 8000292:	43d9      	mvns	r1, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000298:	4313      	orrs	r3, r2
         );
}
 800029a:	4618      	mov	r0, r3
 800029c:	3724      	adds	r7, #36	; 0x24
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <i2c_init>:
#include "main.h"

volatile uint8_t _i2c_error = 0;

// I2C init
void i2c_init() {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	// I2C @ pins PB6, PB7.
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80002aa:	4b3f      	ldr	r3, [pc, #252]	; (80003a8 <i2c_init+0x104>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	4a3e      	ldr	r2, [pc, #248]	; (80003a8 <i2c_init+0x104>)
 80002b0:	f043 0308 	orr.w	r3, r3, #8
 80002b4:	6193      	str	r3, [r2, #24]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF6_Msk | GPIO_CRL_MODE6_Msk, (3 << GPIO_CRL_CNF6_Pos) | (3 << GPIO_CRL_MODE6_Pos));
 80002b6:	4b3d      	ldr	r3, [pc, #244]	; (80003ac <i2c_init+0x108>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a3c      	ldr	r2, [pc, #240]	; (80003ac <i2c_init+0x108>)
 80002bc:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80002c0:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF7_Msk | GPIO_CRL_MODE7_Msk, (3 << GPIO_CRL_CNF7_Pos) | (3 << GPIO_CRL_MODE7_Pos));
 80002c2:	4b3a      	ldr	r3, [pc, #232]	; (80003ac <i2c_init+0x108>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a39      	ldr	r2, [pc, #228]	; (80003ac <i2c_init+0x108>)
 80002c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80002cc:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80002ce:	f7ff ff63 	bl	8000198 <__NVIC_GetPriorityGrouping>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2200      	movs	r2, #0
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ffb1 	bl	8000240 <NVIC_EncodePriority>
 80002de:	4603      	mov	r3, r0
 80002e0:	4619      	mov	r1, r3
 80002e2:	2020      	movs	r0, #32
 80002e4:	f7ff ff82 	bl	80001ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_ER_IRQn);
 80002e8:	2020      	movs	r0, #32
 80002ea:	f7ff ff63 	bl	80001b4 <__NVIC_EnableIRQ>

	// Enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <i2c_init+0x104>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <i2c_init+0x104>)
 80002f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002f8:	61d3      	str	r3, [r2, #28]
	I2C1->OAR2 &= ~I2C_OAR2_ENDUAL; // Disable dual address
 80002fa:	4b2d      	ldr	r3, [pc, #180]	; (80003b0 <i2c_init+0x10c>)
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	4a2c      	ldr	r2, [pc, #176]	; (80003b0 <i2c_init+0x10c>)
 8000300:	f023 0301 	bic.w	r3, r3, #1
 8000304:	60d3      	str	r3, [r2, #12]
	// No global call, enable clock stretch, disable I2C
	MODIFY_REG(I2C1->CR1, I2C_CR1_ENGC | I2C_CR1_NOSTRETCH | I2C_CR1_PE, 0);
 8000306:	4b2a      	ldr	r3, [pc, #168]	; (80003b0 <i2c_init+0x10c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a29      	ldr	r2, [pc, #164]	; (80003b0 <i2c_init+0x10c>)
 800030c:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8000310:	6013      	str	r3, [r2, #0]

	MODIFY_REG(I2C1->CR2, I2C_CR2_FREQ, 36);  // 36 MHz APB1 Clock
 8000312:	4b27      	ldr	r3, [pc, #156]	; (80003b0 <i2c_init+0x10c>)
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <i2c_init+0x10c>)
 800031c:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000320:	6053      	str	r3, [r2, #4]
	MODIFY_REG(I2C1->TRISE, I2C_TRISE_TRISE, 11); // 300 nS TRise time, (1/36MHz)*10
 8000322:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <i2c_init+0x10c>)
 8000324:	6a1b      	ldr	r3, [r3, #32]
 8000326:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800032a:	4a21      	ldr	r2, [pc, #132]	; (80003b0 <i2c_init+0x10c>)
 800032c:	f043 030b 	orr.w	r3, r3, #11
 8000330:	6213      	str	r3, [r2, #32]
	MODIFY_REG(I2C1->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), 30UL | I2C_CCR_FS); // 400kHz speed
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <i2c_init+0x10c>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800033a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800033e:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <i2c_init+0x10c>)
 8000340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000344:	f043 031e 	orr.w	r3, r3, #30
 8000348:	61d3      	str	r3, [r2, #28]

	MODIFY_REG(I2C1->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, 0); // No SMBUS
 800034a:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <i2c_init+0x10c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a18      	ldr	r2, [pc, #96]	; (80003b0 <i2c_init+0x10c>)
 8000350:	f023 031a 	bic.w	r3, r3, #26
 8000354:	6013      	str	r3, [r2, #0]
	MODIFY_REG(I2C1->OAR1, 0x3FF | I2C_OAR1_ADDMODE_Msk, 1 << 14); // Bit 14 has to be always kept 1. WHY, STM, W H Y?! ADDR = 0, 7-bit
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <i2c_init+0x10c>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800035e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000362:	4a13      	ldr	r2, [pc, #76]	; (80003b0 <i2c_init+0x10c>)
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6093      	str	r3, [r2, #8]

	I2C1->CR1 |= I2C_CR1_PE;
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <i2c_init+0x10c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <i2c_init+0x10c>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= I2C_CR1_ACK;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <i2c_init+0x10c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <i2c_init+0x10c>)
 800037c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000380:	6013      	str	r3, [r2, #0]
	//MODIFY_REG(I2C1->OAR2, I2C_OAR2_ADD2_Msk, 0); // ENDUAL already disabled

	I2C1->CR2 |= I2C_CR2_ITERREN;
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <i2c_init+0x10c>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <i2c_init+0x10c>)
 8000388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800038c:	6053      	str	r3, [r2, #4]
	for(uint8_t i = 0; i < 0xFE; i++) {}
 800038e:	2300      	movs	r3, #0
 8000390:	71fb      	strb	r3, [r7, #7]
 8000392:	e002      	b.n	800039a <i2c_init+0xf6>
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	3301      	adds	r3, #1
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2bfd      	cmp	r3, #253	; 0xfd
 800039e:	d9f9      	bls.n	8000394 <i2c_init+0xf0>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	40005400 	.word	0x40005400

080003b4 <I2C1_ER_IRQHandler>:
	I2C1->CR1 &= ~I2C_CR1_PE;
}

// I2C Error IRQ
void I2C1_ER_IRQHandler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
	_i2c_error = ((I2C1->SR1) >> 8) & 0b11111;
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <I2C1_ER_IRQHandler+0x2c>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	0a1b      	lsrs	r3, r3, #8
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	f003 031f 	and.w	r3, r3, #31
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <I2C1_ER_IRQHandler+0x30>)
 80003c8:	701a      	strb	r2, [r3, #0]
	// SmBus errors are just ignored
	I2C1->SR1 &= ~(0b11011111 << 8);
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <I2C1_ER_IRQHandler+0x2c>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <I2C1_ER_IRQHandler+0x2c>)
 80003d0:	f423 435f 	bic.w	r3, r3, #57088	; 0xdf00
 80003d4:	6153      	str	r3, [r2, #20]
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40005400 	.word	0x40005400
 80003e4:	20000024 	.word	0x20000024

080003e8 <i2c_handle_error>:

// Resets I2C, Sends stop condition, etc.
void i2c_handle_error() {
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	if(
		(_i2c_error & I2C_ERR_AF) == I2C_ERR_AF ||
 80003ec:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <i2c_handle_error+0x40>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	f003 0304 	and.w	r3, r3, #4
	if(
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d006      	beq.n	8000408 <i2c_handle_error+0x20>
		(_i2c_error & I2C_ERR_TMO) == I2C_ERR_TMO) {
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <i2c_handle_error+0x40>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	f003 0320 	and.w	r3, r3, #32
		(_i2c_error & I2C_ERR_AF) == I2C_ERR_AF ||
 8000404:	2b20      	cmp	r3, #32
 8000406:	d10a      	bne.n	800041e <i2c_handle_error+0x36>
		I2C1->CR1 |= I2C_CR1_STOP;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <i2c_handle_error+0x44>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a07      	ldr	r2, [pc, #28]	; (800042c <i2c_handle_error+0x44>)
 800040e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000412:	6013      	str	r3, [r2, #0]
		(void) I2C1->SR1; (void) I2C1->SR2;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <i2c_handle_error+0x44>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <i2c_handle_error+0x44>)
 800041a:	699b      	ldr	r3, [r3, #24]
		return;
 800041c:	e000      	b.n	8000420 <i2c_handle_error+0x38>
	}
	return;
 800041e:	bf00      	nop
}
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	20000024 	.word	0x20000024
 800042c:	40005400 	.word	0x40005400

08000430 <i2c_waitBit>:

// Waits for a certain bit in I2C1->SR1 with a timeout
inline uint8_t i2c_waitBit(uint32_t bit) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	_i2c_error = 0;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <i2c_waitBit+0x60>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
	uint16_t timeOut = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	81fb      	strh	r3, [r7, #14]
	while(((I2C1->SR1) & bit) != bit) {
 8000442:	e019      	b.n	8000478 <i2c_waitBit+0x48>
		if((timeOut++ > I2C_TMO_VAL) && (I2C_TMO_VAL != 0)) {
 8000444:	89fb      	ldrh	r3, [r7, #14]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	81fa      	strh	r2, [r7, #14]
 800044a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800044e:	4293      	cmp	r3, r2
 8000450:	d907      	bls.n	8000462 <i2c_waitBit+0x32>
			_i2c_error |= I2C_ERR_TMO;
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <i2c_waitBit+0x60>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	f043 0320 	orr.w	r3, r3, #32
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <i2c_waitBit+0x60>)
 8000460:	701a      	strb	r2, [r3, #0]
		}
		if(_i2c_error != 0) {
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <i2c_waitBit+0x60>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b2db      	uxtb	r3, r3
 8000468:	2b00      	cmp	r3, #0
 800046a:	d005      	beq.n	8000478 <i2c_waitBit+0x48>
			i2c_handle_error();
 800046c:	f7ff ffbc 	bl	80003e8 <i2c_handle_error>
			return _i2c_error;
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <i2c_waitBit+0x60>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	e007      	b.n	8000488 <i2c_waitBit+0x58>
	while(((I2C1->SR1) & bit) != bit) {
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <i2c_waitBit+0x64>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4013      	ands	r3, r2
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	429a      	cmp	r2, r3
 8000484:	d1de      	bne.n	8000444 <i2c_waitBit+0x14>
		}
	}
	return 0;
 8000486:	2300      	movs	r3, #0
}
 8000488:	4618      	mov	r0, r3
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000024 	.word	0x20000024
 8000494:	40005400 	.word	0x40005400

08000498 <i2c_reset_error>:

// Functions to give access to _i2c_error from outside
void i2c_reset_error() {
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
	_i2c_error = 0;
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <i2c_reset_error+0x14>)
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000024 	.word	0x20000024

080004b0 <i2c_get_error>:

uint8_t i2c_get_error() {
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	return _i2c_error;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <i2c_get_error+0x14>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	b2db      	uxtb	r3, r3
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	20000024 	.word	0x20000024

080004c8 <i2c_write>:


// Main write function
uint8_t i2c_write(uint8_t addr, uint16_t sz, uint8_t* buf) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	603a      	str	r2, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	460b      	mov	r3, r1
 80004d6:	80bb      	strh	r3, [r7, #4]
	// Return if any error occurred earlier immediately, wait while I2C is busy
	if(_i2c_error != 0) {i2c_handle_error(); return _i2c_error;}
 80004d8:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <i2c_write+0xf0>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d005      	beq.n	80004ee <i2c_write+0x26>
 80004e2:	f7ff ff81 	bl	80003e8 <i2c_handle_error>
 80004e6:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <i2c_write+0xf0>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	e05f      	b.n	80005ae <i2c_write+0xe6>
	WAITNBIT(I2C1->SR2, I2C_SR2_BUSY);
 80004ee:	bf00      	nop
 80004f0:	4b32      	ldr	r3, [pc, #200]	; (80005bc <i2c_write+0xf4>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0302 	and.w	r3, r3, #2
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d0f9      	beq.n	80004f0 <i2c_write+0x28>
	// Enable ACK
	MODIFY_REG(I2C1->CR1, I2C_CR1_POS | I2C_CR1_ACK, I2C_CR1_ACK);
 80004fc:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <i2c_write+0xf4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000504:	4a2d      	ldr	r2, [pc, #180]	; (80005bc <i2c_write+0xf4>)
 8000506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800050a:	6013      	str	r3, [r2, #0]

	// Send start condition
	I2C1->CR1 |= I2C_CR1_START;
 800050c:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <i2c_write+0xf4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a2a      	ldr	r2, [pc, #168]	; (80005bc <i2c_write+0xf4>)
 8000512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000516:	6013      	str	r3, [r2, #0]
	_i2c_error = 0;
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <i2c_write+0xf0>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
	WAITBIT(I2C1->SR1, I2C_SR1_SB);
 800051e:	bf00      	nop
 8000520:	4b26      	ldr	r3, [pc, #152]	; (80005bc <i2c_write+0xf4>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	2b01      	cmp	r3, #1
 800052a:	d1f9      	bne.n	8000520 <i2c_write+0x58>
	(void) I2C1->SR1;
 800052c:	4b23      	ldr	r3, [pc, #140]	; (80005bc <i2c_write+0xf4>)
 800052e:	695b      	ldr	r3, [r3, #20]

	// Send address
	MODIFY_REG(I2C1->DR, I2C_DR_DR, addr << 1);
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <i2c_write+0xf4>)
 8000532:	691b      	ldr	r3, [r3, #16]
 8000534:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000538:	79fa      	ldrb	r2, [r7, #7]
 800053a:	0052      	lsls	r2, r2, #1
 800053c:	4611      	mov	r1, r2
 800053e:	4a1f      	ldr	r2, [pc, #124]	; (80005bc <i2c_write+0xf4>)
 8000540:	430b      	orrs	r3, r1
 8000542:	6113      	str	r3, [r2, #16]
	RETERR(i2c_waitBit(I2C_SR1_ADDR), _i2c_error);
 8000544:	2002      	movs	r0, #2
 8000546:	f7ff ff73 	bl	8000430 <i2c_waitBit>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d003      	beq.n	8000558 <i2c_write+0x90>
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <i2c_write+0xf0>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	e02a      	b.n	80005ae <i2c_write+0xe6>
	(void) I2C1->SR1; (void) I2C1->SR2;
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <i2c_write+0xf4>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <i2c_write+0xf4>)
 800055e:	699b      	ldr	r3, [r3, #24]

	// Send data
	for(uint16_t i = 0; i < sz; i++) {
 8000560:	2300      	movs	r3, #0
 8000562:	81fb      	strh	r3, [r7, #14]
 8000564:	e018      	b.n	8000598 <i2c_write+0xd0>
		MODIFY_REG(I2C1->DR, I2C_DR_DR, buf[i]);
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <i2c_write+0xf4>)
 8000568:	691b      	ldr	r3, [r3, #16]
 800056a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800056e:	89fa      	ldrh	r2, [r7, #14]
 8000570:	6839      	ldr	r1, [r7, #0]
 8000572:	440a      	add	r2, r1
 8000574:	7812      	ldrb	r2, [r2, #0]
 8000576:	4611      	mov	r1, r2
 8000578:	4a10      	ldr	r2, [pc, #64]	; (80005bc <i2c_write+0xf4>)
 800057a:	430b      	orrs	r3, r1
 800057c:	6113      	str	r3, [r2, #16]
		RETERR(i2c_waitBit(I2C_SR1_TXE), _i2c_error);
 800057e:	2080      	movs	r0, #128	; 0x80
 8000580:	f7ff ff56 	bl	8000430 <i2c_waitBit>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d003      	beq.n	8000592 <i2c_write+0xca>
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <i2c_write+0xf0>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	e00d      	b.n	80005ae <i2c_write+0xe6>
	for(uint16_t i = 0; i < sz; i++) {
 8000592:	89fb      	ldrh	r3, [r7, #14]
 8000594:	3301      	adds	r3, #1
 8000596:	81fb      	strh	r3, [r7, #14]
 8000598:	89fa      	ldrh	r2, [r7, #14]
 800059a:	88bb      	ldrh	r3, [r7, #4]
 800059c:	429a      	cmp	r2, r3
 800059e:	d3e2      	bcc.n	8000566 <i2c_write+0x9e>
	}

	// Send stop condition
	I2C1->CR1 |= I2C_CR1_STOP;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <i2c_write+0xf4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <i2c_write+0xf4>)
 80005a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005aa:	6013      	str	r3, [r2, #0]
	//WAITNBIT(I2C1->SR1, I2C_SR1_STOPF);
	return 0;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000024 	.word	0x20000024
 80005bc:	40005400 	.word	0x40005400

080005c0 <i2c_read>:

// Main read function
uint8_t i2c_read(uint8_t addr, uint16_t sz, uint8_t* buf) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	603a      	str	r2, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	460b      	mov	r3, r1
 80005ce:	80bb      	strh	r3, [r7, #4]
	if(_i2c_error != 0) {i2c_handle_error(); return _i2c_error;}
 80005d0:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <i2c_read+0x108>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d005      	beq.n	80005e6 <i2c_read+0x26>
 80005da:	f7ff ff05 	bl	80003e8 <i2c_handle_error>
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <i2c_read+0x108>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	e06b      	b.n	80006be <i2c_read+0xfe>
	WAITNBIT(I2C1->SR2, I2C_SR2_BUSY);
 80005e6:	bf00      	nop
 80005e8:	4b38      	ldr	r3, [pc, #224]	; (80006cc <i2c_read+0x10c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0302 	and.w	r3, r3, #2
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d0f9      	beq.n	80005e8 <i2c_read+0x28>
	// TODO: Rewrite according to datasheet
	// Enable ACK
	MODIFY_REG(I2C1->CR1, I2C_CR1_POS | I2C_CR1_ACK, I2C_CR1_ACK);
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <i2c_read+0x10c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80005fc:	4a33      	ldr	r2, [pc, #204]	; (80006cc <i2c_read+0x10c>)
 80005fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000602:	6013      	str	r3, [r2, #0]

	// Send start condition
	I2C1->CR1 |= I2C_CR1_START;
 8000604:	4b31      	ldr	r3, [pc, #196]	; (80006cc <i2c_read+0x10c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	; (80006cc <i2c_read+0x10c>)
 800060a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800060e:	6013      	str	r3, [r2, #0]
	WAITBIT(I2C1->SR1, I2C_SR1_SB);
 8000610:	bf00      	nop
 8000612:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <i2c_read+0x10c>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	2b01      	cmp	r3, #1
 800061c:	d1f9      	bne.n	8000612 <i2c_read+0x52>
	(void) I2C1->SR1;
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <i2c_read+0x10c>)
 8000620:	695b      	ldr	r3, [r3, #20]

	// Send address
	MODIFY_REG(I2C1->DR, I2C_DR_DR, (addr << 1) | 0b1);
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <i2c_read+0x10c>)
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800062a:	79fa      	ldrb	r2, [r7, #7]
 800062c:	0052      	lsls	r2, r2, #1
 800062e:	4313      	orrs	r3, r2
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <i2c_read+0x10c>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6113      	str	r3, [r2, #16]
	//WAITBIT(I2C1->SR1, I2C_SR1_ADDR);
	RETERR(i2c_waitBit(I2C_SR1_ADDR), _i2c_error);
 8000638:	2002      	movs	r0, #2
 800063a:	f7ff fef9 	bl	8000430 <i2c_waitBit>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d003      	beq.n	800064c <i2c_read+0x8c>
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <i2c_read+0x108>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	e038      	b.n	80006be <i2c_read+0xfe>

	(void) I2C1->SR1; (void) I2C1->SR2;
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <i2c_read+0x10c>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <i2c_read+0x10c>)
 8000652:	699b      	ldr	r3, [r3, #24]

	// Send data
	for(uint16_t i = 0; i < (sz-1); i++) {
 8000654:	2300      	movs	r3, #0
 8000656:	81fb      	strh	r3, [r7, #14]
 8000658:	e010      	b.n	800067c <i2c_read+0xbc>
		WAITBIT(I2C1->SR1, I2C_SR1_RXNE);
 800065a:	bf00      	nop
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <i2c_read+0x10c>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000664:	2b40      	cmp	r3, #64	; 0x40
 8000666:	d1f9      	bne.n	800065c <i2c_read+0x9c>
		buf[i] = I2C1->DR & I2C_DR_DR;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <i2c_read+0x10c>)
 800066a:	6919      	ldr	r1, [r3, #16]
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	4413      	add	r3, r2
 8000672:	b2ca      	uxtb	r2, r1
 8000674:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < (sz-1); i++) {
 8000676:	89fb      	ldrh	r3, [r7, #14]
 8000678:	3301      	adds	r3, #1
 800067a:	81fb      	strh	r3, [r7, #14]
 800067c:	89fa      	ldrh	r2, [r7, #14]
 800067e:	88bb      	ldrh	r3, [r7, #4]
 8000680:	3b01      	subs	r3, #1
 8000682:	429a      	cmp	r2, r3
 8000684:	dbe9      	blt.n	800065a <i2c_read+0x9a>
	}

	// Disable ACK, send stop immedeately after this byte
	I2C1->CR1 &= ~I2C_CR1_ACK;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <i2c_read+0x10c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a10      	ldr	r2, [pc, #64]	; (80006cc <i2c_read+0x10c>)
 800068c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000690:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= I2C_CR1_STOP;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <i2c_read+0x10c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <i2c_read+0x10c>)
 8000698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800069c:	6013      	str	r3, [r2, #0]
	WAITBIT(I2C1->SR1, I2C_SR1_RXNE);
 800069e:	bf00      	nop
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <i2c_read+0x10c>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a8:	2b40      	cmp	r3, #64	; 0x40
 80006aa:	d1f9      	bne.n	80006a0 <i2c_read+0xe0>

	buf[sz-1] = I2C1->DR & I2C_DR_DR;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <i2c_read+0x10c>)
 80006ae:	6919      	ldr	r1, [r3, #16]
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	4413      	add	r3, r2
 80006b8:	b2ca      	uxtb	r2, r1
 80006ba:	701a      	strb	r2, [r3, #0]
	return 0;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000024 	.word	0x20000024
 80006cc:	40005400 	.word	0x40005400

080006d0 <i2c_write8>:

// Alternative read-write functions
uint8_t i2c_write8(uint8_t addr, uint8_t byte) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	return i2c_write(addr, 1, &byte);
 80006e0:	1dba      	adds	r2, r7, #6
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2101      	movs	r1, #1
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff feee 	bl	80004c8 <i2c_write>
 80006ec:	4603      	mov	r3, r0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <i2c_read8>:

uint8_t i2c_read8(uint8_t addr) {
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	71fb      	strb	r3, [r7, #7]
	uint8_t retVal;
	i2c_read(addr, 1, &retVal);
 8000700:	f107 020f 	add.w	r2, r7, #15
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2101      	movs	r1, #1
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff59 	bl	80005c0 <i2c_read>
	return retVal;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <i2c_readRegister8>:
	RETERR(i2c_write8(addr, reg), _i2c_error);
	//for(uint8_t i = 0; i < 0xFF; i++) {}
	return i2c_read(addr, sz, buf);
}

uint8_t i2c_readRegister8(uint8_t addr, uint8_t reg) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
	RETERR(i2c_write8(addr, reg), _i2c_error);
 8000728:	79ba      	ldrb	r2, [r7, #6]
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffce 	bl	80006d0 <i2c_write8>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <i2c_readRegister8+0x2a>
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <i2c_readRegister8+0x3c>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	e004      	b.n	800074c <i2c_readRegister8+0x34>
	//for(uint8_t i = 0; i < 0xFF; i++) {}
	return i2c_read8(addr);
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ffd6 	bl	80006f6 <i2c_read8>
 800074a:	4603      	mov	r3, r0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000024 	.word	0x20000024

08000758 <i2c_writeRegister8>:

uint8_t i2c_writeRegister8(uint8_t addr, uint8_t reg, uint8_t val) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
 8000762:	460b      	mov	r3, r1
 8000764:	71bb      	strb	r3, [r7, #6]
 8000766:	4613      	mov	r3, r2
 8000768:	717b      	strb	r3, [r7, #5]
	uint8_t sndBuf[] = {reg, val};
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	733b      	strb	r3, [r7, #12]
 800076e:	797b      	ldrb	r3, [r7, #5]
 8000770:	737b      	strb	r3, [r7, #13]
	return i2c_write(addr, 2, sndBuf);
 8000772:	f107 020c 	add.w	r2, r7, #12
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fea4 	bl	80004c8 <i2c_write>
 8000780:	4603      	mov	r3, r0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <__NVIC_SetPriorityGrouping>:
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <EXTI9_5_IRQHandler>:
#endif


// For the sa2.c
void EXTI9_5_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR8 | EXTI_PR_PR9;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <EXTI9_5_IRQHandler+0x18>)
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	4a03      	ldr	r2, [pc, #12]	; (80007ec <EXTI9_5_IRQHandler+0x18>)
 80007de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80007e2:	6153      	str	r3, [r2, #20]
	sa2_handle_pins();
 80007e4:	f000 fd40 	bl	8001268 <sa2_handle_pins>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40010400 	.word	0x40010400

080007f0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR10 | EXTI_PR_PR11 | EXTI_PR_PR12 | EXTI_PR_PR13 | EXTI_PR_PR14 | EXTI_PR_PR15;
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <EXTI15_10_IRQHandler+0x18>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	4a03      	ldr	r2, [pc, #12]	; (8000808 <EXTI15_10_IRQHandler+0x18>)
 80007fa:	f443 437c 	orr.w	r3, r3, #64512	; 0xfc00
 80007fe:	6153      	str	r3, [r2, #20]
	sa2_handle_pins();
 8000800:	f000 fd32 	bl	8001268 <sa2_handle_pins>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40010400 	.word	0x40010400

0800080c <rcc_configure>:

void rcc_configure() {
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	// Flash latency: 78 MHz -> Two wait states (0b010)
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 8000810:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <rcc_configure+0xb8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <rcc_configure+0xb8>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	6013      	str	r3, [r2, #0]
	WAITBIT(FLASH->ACR, FLASH_ACR_LATENCY_1);
 800081c:	bf00      	nop
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <rcc_configure+0xb8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	2b02      	cmp	r3, #2
 8000828:	d1f9      	bne.n	800081e <rcc_configure+0x12>

	//Enable HSE
	RCC->CR |= RCC_CR_HSEON;
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <rcc_configure+0xbc>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <rcc_configure+0xbc>)
 8000830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000834:	6013      	str	r3, [r2, #0]
	WAITBIT(RCC->CR, RCC_CR_HSERDY);
 8000836:	bf00      	nop
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <rcc_configure+0xbc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000844:	d1f8      	bne.n	8000838 <rcc_configure+0x2c>

	// HSE, x9, no prediv
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC, RCC_CFGR_PLLMULL9 | RCC_CFGR_PLLSRC);
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <rcc_configure+0xbc>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800084e:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <rcc_configure+0xbc>)
 8000850:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000854:	6053      	str	r3, [r2, #4]

	//Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <rcc_configure+0xbc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <rcc_configure+0xbc>)
 800085c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000860:	6013      	str	r3, [r2, #0]
	WAITBIT(RCC->CR, RCC_CR_PLLRDY);
 8000862:	bf00      	nop
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <rcc_configure+0xbc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800086c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000870:	d1f8      	bne.n	8000864 <rcc_configure+0x58>

	//Set prescalers: AHB = /1, APB1 = /2, APB2 = /1
	MODIFY_REG(RCC->CFGR,
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <rcc_configure+0xbc>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800087a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <rcc_configure+0xbc>)
 8000880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000884:	6053      	str	r3, [r2, #4]
			RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2,
			RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1);

	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <rcc_configure+0xbc>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f023 0303 	bic.w	r3, r3, #3
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <rcc_configure+0xbc>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6053      	str	r3, [r2, #4]
	WAITVAL(RCC->CFGR, RCC_CFGR_SWS, RCC_CFGR_SWS_PLL);
 8000896:	bf00      	nop
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <rcc_configure+0xbc>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 030c 	and.w	r3, r3, #12
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	d1f9      	bne.n	8000898 <rcc_configure+0x8c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i

	__disable_irq();
	SysTick->LOAD = (uint32_t)(72000 + 1);
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <rcc_configure+0xc0>)
 80008a8:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <rcc_configure+0xc4>)
 80008aa:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <rcc_configure+0xc0>)
 80008ae:	2205      	movs	r2, #5
 80008b0:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0UL;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <rcc_configure+0xc0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80008b8:	b662      	cpsie	i
	__enable_irq();
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40022000 	.word	0x40022000
 80008c8:	40021000 	.word	0x40021000
 80008cc:	e000e010 	.word	0xe000e010
 80008d0:	00011941 	.word	0x00011941

080008d4 <gpio_configure>:

void gpio_configure() {
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN | RCC_APB2ENR_IOPDEN;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <gpio_configure+0x34>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <gpio_configure+0x34>)
 80008de:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 80008e2:	6193      	str	r3, [r2, #24]

	// Configure LED as output
	MODIFY_REG(GPIOC->CRH,
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <gpio_configure+0x38>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <gpio_configure+0x38>)
 80008ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f2:	6053      	str	r3, [r2, #4]
			GPIO_CRH_MODE13 | GPIO_CRH_CNF13,
			(2 << GPIO_CRH_MODE13_Pos) | (0 << GPIO_CRH_CNF13_Pos));
	GPIOC->BSRR |= GPIO_BSRR_BS13;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <gpio_configure+0x38>)
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <gpio_configure+0x38>)
 80008fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008fe:	6113      	str	r3, [r2, #16]

}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000
 800090c:	40011000 	.word	0x40011000

08000910 <_delayMs>:

void _delayMs(uint32_t del) {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	SysTick->VAL = 0;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <_delayMs+0x34>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
	while (del) {
 800091e:	e008      	b.n	8000932 <_delayMs+0x22>
		if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_delayMs+0x34>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <_delayMs+0x22>
		{
			del--;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
	while (del) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1f3      	bne.n	8000920 <_delayMs+0x10>
	    }
	}
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <main>:

uint8_t s6[16] = {0b001, 0b100, 0b010, 0b100, 0b100, 0b001, 0b010, 0b100, 0b001, 0b100, 0b010, 0b100, 0b100, 0b001, 0b010, 0b100};
uint8_t s7[16] = {0b0, 0b0, 0b10, 0b0, 0b0, 0b0, 0b0, 0b0, 0b10, 0b0, 0b0, 0b0, 0b10, 0b0, 0b0, 0b0};

int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <main+0x9c>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a24      	ldr	r2, [pc, #144]	; (80009e4 <main+0x9c>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <main+0x9c>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <main+0x9c>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000962:	61d3      	str	r3, [r2, #28]
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f7ff ff11 	bl	800078c <__NVIC_SetPriorityGrouping>

	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <main+0xa0>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <main+0xa0>)
 8000970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000974:	6053      	str	r3, [r2, #4]
	DBGMCU->CR |= DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY | DBGMCU_CR_DBG_SLEEP;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <main+0xa4>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <main+0xa4>)
 800097c:	f043 0307 	orr.w	r3, r3, #7
 8000980:	6053      	str	r3, [r2, #4]

	rcc_configure();
 8000982:	f7ff ff43 	bl	800080c <rcc_configure>
	gpio_configure();
 8000986:	f7ff ffa5 	bl	80008d4 <gpio_configure>


	i2c_init();
 800098a:	f7ff fc8b 	bl	80002a4 <i2c_init>


	// Attempt to init the si5351, flash the led if we fail
	while(1) {
		i2c_reset_error();
 800098e:	f7ff fd83 	bl	8000498 <i2c_reset_error>
		si5351_init(SI5351_CRYSTAL_LOAD_10PF);
 8000992:	20c0      	movs	r0, #192	; 0xc0
 8000994:	f001 f94c 	bl	8001c30 <si5351_init>
		_delayMs(100);
 8000998:	2064      	movs	r0, #100	; 0x64
 800099a:	f7ff ffb9 	bl	8000910 <_delayMs>
		if(i2c_get_error() == 0) {break;}
 800099e:	f7ff fd87 	bl	80004b0 <i2c_get_error>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d006      	beq.n	80009b6 <main+0x6e>
		else {GPIOC->ODR ^= GPIO_ODR_ODR13;}
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <main+0xa8>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <main+0xa8>)
 80009ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80009b2:	60d3      	str	r3, [r2, #12]
		i2c_reset_error();
 80009b4:	e7eb      	b.n	800098e <main+0x46>
		if(i2c_get_error() == 0) {break;}
 80009b6:	bf00      	nop
	}
	GPIOC->BSRR |= GPIO_BSRR_BS13;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <main+0xa8>)
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <main+0xa8>)
 80009be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c2:	6113      	str	r3, [r2, #16]
	i2c_deinit();
	PWR->CR |= PWR_CR_PDDS;
	__WFI();
	*/

	sa2_init();
 80009c4:	f000 fc46 	bl	8001254 <sa2_init>
	midi_init();
 80009c8:	f000 f96a 	bl	8000ca0 <midi_init>
	_delayMs(10);
 80009cc:	200a      	movs	r0, #10
 80009ce:	f7ff ff9f 	bl	8000910 <_delayMs>
	sa2_set_poly(SA2_POLY_4);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f000 ffbe 	bl	8001954 <sa2_set_poly>
	sa2_issue_reset();
 80009d8:	f000 ff9a 	bl	8001910 <sa2_issue_reset>
    /* Loop forever */
	for(;;) {
		sa2_update_clock();
 80009dc:	f000 fcaa 	bl	8001334 <sa2_update_clock>
 80009e0:	e7fc      	b.n	80009dc <main+0x94>
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010000 	.word	0x40010000
 80009ec:	e0042000 	.word	0xe0042000
 80009f0:	40011000 	.word	0x40011000

080009f4 <__NVIC_GetPriorityGrouping>:
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4906      	ldr	r1, [pc, #24]	; (8000a44 <__NVIC_EnableIRQ+0x34>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <USART1_IRQHandler>:
/*
void handle_midi_message(uint8_t cmd, uint8_t fb, uint8_t sb) {
}
*/

void USART1_IRQHandler(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
	uint8_t rb = USART1->DR;
 8000b06:	4b61      	ldr	r3, [pc, #388]	; (8000c8c <USART1_IRQHandler+0x18c>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	71fb      	strb	r3, [r7, #7]

	if(((USART1->SR) & USART_SR_ORE) != 0) {
 8000b0c:	4b5f      	ldr	r3, [pc, #380]	; (8000c8c <USART1_IRQHandler+0x18c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d003      	beq.n	8000b20 <USART1_IRQHandler+0x20>
		_midi_mode = MIDI_MODE_RESET;
 8000b18:	4b5d      	ldr	r3, [pc, #372]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
		return;
 8000b1e:	e0b2      	b.n	8000c86 <USART1_IRQHandler+0x186>
	}

	// Ignore all the realtime bytes, they must not affect the parsing.
	if(rb == 0xF8 || rb == 0xFA || rb == 0xFB || rb == 0xFC || rb == 0xFE || rb == 0xFF) {
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	2bf8      	cmp	r3, #248	; 0xf8
 8000b24:	f000 80a8 	beq.w	8000c78 <USART1_IRQHandler+0x178>
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2bfa      	cmp	r3, #250	; 0xfa
 8000b2c:	f000 80a4 	beq.w	8000c78 <USART1_IRQHandler+0x178>
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2bfb      	cmp	r3, #251	; 0xfb
 8000b34:	f000 80a0 	beq.w	8000c78 <USART1_IRQHandler+0x178>
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	2bfc      	cmp	r3, #252	; 0xfc
 8000b3c:	f000 809c 	beq.w	8000c78 <USART1_IRQHandler+0x178>
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2bfe      	cmp	r3, #254	; 0xfe
 8000b44:	f000 8098 	beq.w	8000c78 <USART1_IRQHandler+0x178>
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	f000 8094 	beq.w	8000c78 <USART1_IRQHandler+0x178>
		return;
	}

	if(((_midi_mode == MIDI_MODE_RESET) || (_midi_mode == MIDI_MODE_SYSEX)) && MIDI_IS_DATA(rb)) {
 8000b50:	4b4f      	ldr	r3, [pc, #316]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d004      	beq.n	8000b64 <USART1_IRQHandler+0x64>
 8000b5a:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d104      	bne.n	8000b6e <USART1_IRQHandler+0x6e>
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f280 8087 	bge.w	8000c7c <USART1_IRQHandler+0x17c>
		// Simply wait. We don't know the running status at this point anyways
		return;
	}

	if MIDI_IS_STAT(rb) {
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	da22      	bge.n	8000bbc <USART1_IRQHandler+0xbc>
		// Immedeately change the running status
		_midi_status = rb;
 8000b76:	4a47      	ldr	r2, [pc, #284]	; (8000c94 <USART1_IRQHandler+0x194>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	7013      	strb	r3, [r2, #0]
		uint8_t cmd = MIDI_CMD(rb);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f023 030f 	bic.w	r3, r3, #15
 8000b82:	71bb      	strb	r3, [r7, #6]
		if(rb == 0xF0) {_midi_mode = MIDI_MODE_SYSEX;}
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2bf0      	cmp	r3, #240	; 0xf0
 8000b88:	d103      	bne.n	8000b92 <USART1_IRQHandler+0x92>
 8000b8a:	4b41      	ldr	r3, [pc, #260]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e079      	b.n	8000c86 <USART1_IRQHandler+0x186>
		else if(cmd == 0xF0) {_midi_mode = MIDI_MODE_RESET;} // Any other 0xFx message, including sysex end. Start ignoring everything except status bytes
 8000b92:	79bb      	ldrb	r3, [r7, #6]
 8000b94:	2bf0      	cmp	r3, #240	; 0xf0
 8000b96:	d103      	bne.n	8000ba0 <USART1_IRQHandler+0xa0>
 8000b98:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e072      	b.n	8000c86 <USART1_IRQHandler+0x186>
		else if(cmd == 0xC0 || cmd == 0xD0) {_midi_mode = MIDI_MODE_SINGLE_WAIT;} // Channel and pressure, only non-0xFx messages with one byte
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8000ba4:	d002      	beq.n	8000bac <USART1_IRQHandler+0xac>
 8000ba6:	79bb      	ldrb	r3, [r7, #6]
 8000ba8:	2bd0      	cmp	r3, #208	; 0xd0
 8000baa:	d103      	bne.n	8000bb4 <USART1_IRQHandler+0xb4>
 8000bac:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e068      	b.n	8000c86 <USART1_IRQHandler+0x186>
		else {_midi_mode = MIDI_MODE_1BYTE_WAIT;}
 8000bb4:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e064      	b.n	8000c86 <USART1_IRQHandler+0x186>
	} else {
		if (MIDI_CMD(_midi_status) == 0xF0) {return;} // Just to be sure.
 8000bbc:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <USART1_IRQHandler+0x194>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bc6:	2bf0      	cmp	r3, #240	; 0xf0
 8000bc8:	d05a      	beq.n	8000c80 <USART1_IRQHandler+0x180>
		if ((_midi_own_channel != MIDI_ALLCHAN) && (MIDI_CHAN(rb) != _midi_own_channel)) {return;} // MIDI Channel check
 8000bca:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <USART1_IRQHandler+0x198>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2bff      	cmp	r3, #255	; 0xff
 8000bd2:	d007      	beq.n	8000be4 <USART1_IRQHandler+0xe4>
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <USART1_IRQHandler+0x198>)
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d14f      	bne.n	8000c84 <USART1_IRQHandler+0x184>
		if(_midi_mode == MIDI_MODE_1BYTE_WAIT) {
 8000be4:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d106      	bne.n	8000bfc <USART1_IRQHandler+0xfc>
			// Store the first byte, wait for second
			_midi_firstbyte = rb;
 8000bee:	4a2b      	ldr	r2, [pc, #172]	; (8000c9c <USART1_IRQHandler+0x19c>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	7013      	strb	r3, [r2, #0]
			_midi_mode = MIDI_MODE_2BYTE_WAIT;
 8000bf4:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e044      	b.n	8000c86 <USART1_IRQHandler+0x186>
		} else if (_midi_mode == MIDI_MODE_2BYTE_WAIT) {
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d12a      	bne.n	8000c5c <USART1_IRQHandler+0x15c>
			// Handle 2-byte midi message
			if ((MIDI_CMD(_midi_status) == 0x90) && (rb == 0)) { // Implicit note off
 8000c06:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <USART1_IRQHandler+0x194>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c10:	2b90      	cmp	r3, #144	; 0x90
 8000c12:	d115      	bne.n	8000c40 <USART1_IRQHandler+0x140>
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d112      	bne.n	8000c40 <USART1_IRQHandler+0x140>
				handle_midi_message(0x80 | MIDI_CHAN(_midi_status), _midi_firstbyte, 0);
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <USART1_IRQHandler+0x194>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	b2d8      	uxtb	r0, r3
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <USART1_IRQHandler+0x19c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2200      	movs	r2, #0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f000 f877 	bl	8000d2c <handle_midi_message>
 8000c3e:	e009      	b.n	8000c54 <USART1_IRQHandler+0x154>
			} else {
				handle_midi_message(_midi_status, _midi_firstbyte, rb);
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <USART1_IRQHandler+0x194>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <USART1_IRQHandler+0x19c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	79fa      	ldrb	r2, [r7, #7]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f000 f86c 	bl	8000d2c <handle_midi_message>
			}
			_midi_mode = MIDI_MODE_1BYTE_WAIT;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000c56:	2202      	movs	r2, #2
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e014      	b.n	8000c86 <USART1_IRQHandler+0x186>
		} else if (_midi_mode == MIDI_MODE_SINGLE_WAIT) {
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <USART1_IRQHandler+0x190>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d10f      	bne.n	8000c86 <USART1_IRQHandler+0x186>
			handle_midi_message(_midi_status, rb, 0);
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <USART1_IRQHandler+0x194>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	79f9      	ldrb	r1, [r7, #7]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f85b 	bl	8000d2c <handle_midi_message>
 8000c76:	e006      	b.n	8000c86 <USART1_IRQHandler+0x186>
		return;
 8000c78:	bf00      	nop
 8000c7a:	e004      	b.n	8000c86 <USART1_IRQHandler+0x186>
		return;
 8000c7c:	bf00      	nop
 8000c7e:	e002      	b.n	8000c86 <USART1_IRQHandler+0x186>
		if (MIDI_CMD(_midi_status) == 0xF0) {return;} // Just to be sure.
 8000c80:	bf00      	nop
 8000c82:	e000      	b.n	8000c86 <USART1_IRQHandler+0x186>
		if ((_midi_own_channel != MIDI_ALLCHAN) && (MIDI_CHAN(rb) != _midi_own_channel)) {return;} // MIDI Channel check
 8000c84:	bf00      	nop
		}
	}
}
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40013800 	.word	0x40013800
 8000c90:	20000026 	.word	0x20000026
 8000c94:	20000025 	.word	0x20000025
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000027 	.word	0x20000027

08000ca0 <midi_init>:

void midi_init(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	// 1. Init the clocks
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <midi_init+0x80>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <midi_init+0x80>)
 8000caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]

	//2. Init the PA9 (USART TX), PA10 (USART RX) pins
	//MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF9 | GPIO_CRH_MODE9, (3 << GPIO_CRH_CNF9) | (3 << GPIO_CRH_MODE9_Pos)); // Don't need that.
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF10 | GPIO_CRH_MODE10, (1 << GPIO_CRH_CNF10_Pos) | (0 << GPIO_CRH_MODE10_Pos));
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <midi_init+0x84>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <midi_init+0x84>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc2:	6053      	str	r3, [r2, #4]
	//MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF10 | GPIO_CRH_MODE10, (2 << GPIO_CRH_CNF10_Pos) | (0 << GPIO_CRH_MODE10_Pos));
	//MODIFY_REG(GPIOA->ODR, 0, GPIO_ODR_ODR10);

	// 3. Config the NVIC for the USART IRQ
	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8000cc4:	f7ff fe96 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fee4 	bl	8000a9c <NVIC_EncodePriority>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	2025      	movs	r0, #37	; 0x25
 8000cda:	f7ff feb5 	bl	8000a48 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8000cde:	2025      	movs	r0, #37	; 0x25
 8000ce0:	f7ff fe96 	bl	8000a10 <__NVIC_EnableIRQ>

	// 4. Init the USART
	// Midi: 31250kbps, 8bit, no parity, 1 stopbit

	MODIFY_REG(USART1->CR1, USART_CR1_M | USART_CR1_PCE | USART_CR1_TE, (0 << USART_CR1_M_Pos) | (0 << USART_CR1_PS_Pos) | USART_CR1_RE);
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <midi_init+0x88>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8000cec:	f023 030c 	bic.w	r3, r3, #12
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <midi_init+0x88>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	60d3      	str	r3, [r2, #12]
	MODIFY_REG(USART1->CR2, USART_CR2_STOP, 0 << USART_CR2_STOP_Pos);
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <midi_init+0x88>)
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <midi_init+0x88>)
 8000cfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d02:	6113      	str	r3, [r2, #16]
	// CR3 is just fine.

	// 31250kbps, so USARTDIV = 72MHz / (16 * 31250) = 144
	USART1->BRR = 144UL << USART_BRR_DIV_Mantissa_Pos;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <midi_init+0x88>)
 8000d06:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8000d0a:	609a      	str	r2, [r3, #8]

	// Enable the RX interrupt and USART
	USART1->CR1 |= USART_CR1_UE | USART_CR1_RXNEIE;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <midi_init+0x88>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <midi_init+0x88>)
 8000d12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d16:	f043 0320 	orr.w	r3, r3, #32
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010800 	.word	0x40010800
 8000d28:	40013800 	.word	0x40013800

08000d2c <handle_midi_message>:

#include "sa2.h"
#include "midi.h"
#include "midi_sa2_handler.h"

void handle_midi_message(uint8_t cmd, uint8_t fb, uint8_t sb) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	460b      	mov	r3, r1
 8000d38:	71bb      	strb	r3, [r7, #6]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	717b      	strb	r3, [r7, #5]
	// Note that implicit note off is already dealt with and passed as a 0x80 note off command
	switch(MIDI_CMD(cmd)) {
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d44:	2b90      	cmp	r3, #144	; 0x90
 8000d46:	d050      	beq.n	8000dea <handle_midi_message+0xbe>
 8000d48:	2b90      	cmp	r3, #144	; 0x90
 8000d4a:	dc03      	bgt.n	8000d54 <handle_midi_message+0x28>
 8000d4c:	2b80      	cmp	r3, #128	; 0x80
 8000d4e:	f000 80da 	beq.w	8000f06 <handle_midi_message+0x1da>
 8000d52:	e0fe      	b.n	8000f52 <handle_midi_message+0x226>
 8000d54:	2bb0      	cmp	r3, #176	; 0xb0
 8000d56:	d00e      	beq.n	8000d76 <handle_midi_message+0x4a>
 8000d58:	2be0      	cmp	r3, #224	; 0xe0
 8000d5a:	f040 80fa 	bne.w	8000f52 <handle_midi_message+0x226>
	case 0xE0:
		sa2_set_pitchbend((uint16_t)fb + ((uint16_t)sb << 7));
 8000d5e:	79bb      	ldrb	r3, [r7, #6]
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	797b      	ldrb	r3, [r7, #5]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	4413      	add	r3, r2
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 fcee 	bl	8001750 <sa2_set_pitchbend>
		break;
 8000d74:	e0ed      	b.n	8000f52 <handle_midi_message+0x226>
	case 0xB0:
		if (fb == 1) {sa2_set_modulation(sb);}				// CC1: Modulation
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d104      	bne.n	8000d86 <handle_midi_message+0x5a>
 8000d7c:	797b      	ldrb	r3, [r7, #5]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fd1a 	bl	80017b8 <sa2_set_modulation>
			if (sb >= 84) {sa2_set_modulation_type(SA2_MOD_FM_HIGH);}
			else if (sb >= 42) {sa2_set_modulation_type(SA2_MOD_FM);}
			else {sa2_set_modulation_type(SA2_MOD_VIBRATO);}
		}
		else if(fb == 123) {sa2_reset_all_keys();}			// CC123: All notes off
		break;
 8000d84:	e0e2      	b.n	8000f4c <handle_midi_message+0x220>
		else if (fb == 3) {sa2_set_modulation_rate(sb);}	// CC3: ModRate
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d104      	bne.n	8000d96 <handle_midi_message+0x6a>
 8000d8c:	797b      	ldrb	r3, [r7, #5]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fd24 	bl	80017dc <sa2_set_modulation_rate>
		break;
 8000d94:	e0da      	b.n	8000f4c <handle_midi_message+0x220>
		else if (fb == 16) {								// CC 16: Polyphony (4/2)
 8000d96:	79bb      	ldrb	r3, [r7, #6]
 8000d98:	2b10      	cmp	r3, #16
 8000d9a:	d10a      	bne.n	8000db2 <handle_midi_message+0x86>
			if (sb >= 64) {sa2_set_poly(SA2_POLY_4);}
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000da0:	d903      	bls.n	8000daa <handle_midi_message+0x7e>
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 fdd6 	bl	8001954 <sa2_set_poly>
		break;
 8000da8:	e0d0      	b.n	8000f4c <handle_midi_message+0x220>
			else {sa2_set_poly(SA2_POLY_2);}
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 fdd2 	bl	8001954 <sa2_set_poly>
		break;
 8000db0:	e0cc      	b.n	8000f4c <handle_midi_message+0x220>
		else if (fb == 17) {								// CC 17: ModRate range
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b11      	cmp	r3, #17
 8000db6:	d111      	bne.n	8000ddc <handle_midi_message+0xb0>
			if (sb >= 84) {sa2_set_modulation_type(SA2_MOD_FM_HIGH);}
 8000db8:	797b      	ldrb	r3, [r7, #5]
 8000dba:	2b53      	cmp	r3, #83	; 0x53
 8000dbc:	d903      	bls.n	8000dc6 <handle_midi_message+0x9a>
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f000 fd22 	bl	8001808 <sa2_set_modulation_type>
		break;
 8000dc4:	e0c2      	b.n	8000f4c <handle_midi_message+0x220>
			else if (sb >= 42) {sa2_set_modulation_type(SA2_MOD_FM);}
 8000dc6:	797b      	ldrb	r3, [r7, #5]
 8000dc8:	2b29      	cmp	r3, #41	; 0x29
 8000dca:	d903      	bls.n	8000dd4 <handle_midi_message+0xa8>
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 fd1b 	bl	8001808 <sa2_set_modulation_type>
		break;
 8000dd2:	e0bb      	b.n	8000f4c <handle_midi_message+0x220>
			else {sa2_set_modulation_type(SA2_MOD_VIBRATO);}
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 fd17 	bl	8001808 <sa2_set_modulation_type>
		break;
 8000dda:	e0b7      	b.n	8000f4c <handle_midi_message+0x220>
		else if(fb == 123) {sa2_reset_all_keys();}			// CC123: All notes off
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	2b7b      	cmp	r3, #123	; 0x7b
 8000de0:	f040 80b4 	bne.w	8000f4c <handle_midi_message+0x220>
 8000de4:	f000 fe12 	bl	8001a0c <sa2_reset_all_keys>
		break;
 8000de8:	e0b0      	b.n	8000f4c <handle_midi_message+0x220>
	case 0x90:
		// Handle all the functional/triggered only keys here
		if (fb == 24) {sa2_press_select(SA2_NOTE_TRIGGER); return;}									// C0 : select
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	2b18      	cmp	r3, #24
 8000dee:	d103      	bne.n	8000df8 <handle_midi_message+0xcc>
 8000df0:	2002      	movs	r0, #2
 8000df2:	f000 feff 	bl	8001bf4 <sa2_press_select>
 8000df6:	e0ac      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 25) {sa2_press_stop(SA2_NOTE_TRIGGER); return;}								// C#0 : stop
 8000df8:	79bb      	ldrb	r3, [r7, #6]
 8000dfa:	2b19      	cmp	r3, #25
 8000dfc:	d103      	bne.n	8000e06 <handle_midi_message+0xda>
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f000 ff07 	bl	8001c12 <sa2_press_stop>
 8000e04:	e0a5      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 26) {sa2_press_tempoDown(SA2_NOTE_TRIGGER); return;}							// D0 : tempo down
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	2b1a      	cmp	r3, #26
 8000e0a:	d103      	bne.n	8000e14 <handle_midi_message+0xe8>
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f000 fec4 	bl	8001b9a <sa2_press_tempoDown>
 8000e12:	e09e      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 27) {sa2_press_tempoUp(SA2_NOTE_TRIGGER); return;}							// D#0 : tempo up
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	2b1b      	cmp	r3, #27
 8000e18:	d103      	bne.n	8000e22 <handle_midi_message+0xf6>
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f000 feae 	bl	8001b7c <sa2_press_tempoUp>
 8000e20:	e097      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 28) {sa2_press_volDown(SA2_NOTE_TRIGGER); return;}							// E0 : volume down
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	2b1c      	cmp	r3, #28
 8000e26:	d103      	bne.n	8000e30 <handle_midi_message+0x104>
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f000 fed4 	bl	8001bd6 <sa2_press_volDown>
 8000e2e:	e090      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 29) {sa2_press_volUp(SA2_NOTE_TRIGGER); return;}								// F0 : volume up
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	2b1d      	cmp	r3, #29
 8000e34:	d103      	bne.n	8000e3e <handle_midi_message+0x112>
 8000e36:	2002      	movs	r0, #2
 8000e38:	f000 febe 	bl	8001bb8 <sa2_press_volUp>
 8000e3c:	e089      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb >= 31 && fb < (31 + 5)) {sa2_press_demo(fb - 30, SA2_NOTE_TRIGGER); return;}	// G0 - B0: demos
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	2b1e      	cmp	r3, #30
 8000e42:	d90a      	bls.n	8000e5a <handle_midi_message+0x12e>
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	2b23      	cmp	r3, #35	; 0x23
 8000e48:	d807      	bhi.n	8000e5a <handle_midi_message+0x12e>
 8000e4a:	79bb      	ldrb	r3, [r7, #6]
 8000e4c:	3b1e      	subs	r3, #30
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2102      	movs	r1, #2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fe76 	bl	8001b44 <sa2_press_demo>
 8000e58:	e07b      	b.n	8000f52 <handle_midi_message+0x226>
		else if ((fb >= 36) && (fb < 36+10)) {sa2_press_digit(fb - 36, SA2_NOTE_TRIGGER); return;}	// C1 - A1: digits
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	2b23      	cmp	r3, #35	; 0x23
 8000e5e:	d90a      	bls.n	8000e76 <handle_midi_message+0x14a>
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	2b2d      	cmp	r3, #45	; 0x2d
 8000e64:	d807      	bhi.n	8000e76 <handle_midi_message+0x14a>
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	3b24      	subs	r3, #36	; 0x24
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fe0c 	bl	8001a8c <sa2_press_digit>
 8000e74:	e06d      	b.n	8000f52 <handle_midi_message+0x226>
		else if ((fb >= 48) && (fb < 52)) {sa2_set_octave((fb - 48)); return;} 						// C2 - D#2: set octave
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	2b2f      	cmp	r3, #47	; 0x2f
 8000e7a:	d909      	bls.n	8000e90 <handle_midi_message+0x164>
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	2b33      	cmp	r3, #51	; 0x33
 8000e80:	d806      	bhi.n	8000e90 <handle_midi_message+0x164>
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	3b30      	subs	r3, #48	; 0x30
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fc73 	bl	8001774 <sa2_set_octave>
 8000e8e:	e060      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 52) {sa2_set_pitchbend_range(SA2_PB_FULLTONE); return;} 						// E2 - F#2: set pitchbend range
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	2b34      	cmp	r3, #52	; 0x34
 8000e94:	d103      	bne.n	8000e9e <handle_midi_message+0x172>
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 fc7e 	bl	8001798 <sa2_set_pitchbend_range>
 8000e9c:	e059      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 53) {sa2_set_pitchbend_range(SA2_PB_OCTAVE); return;}						// E2 - F#2: set pitchbend range
 8000e9e:	79bb      	ldrb	r3, [r7, #6]
 8000ea0:	2b35      	cmp	r3, #53	; 0x35
 8000ea2:	d103      	bne.n	8000eac <handle_midi_message+0x180>
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f000 fc77 	bl	8001798 <sa2_set_pitchbend_range>
 8000eaa:	e052      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 54) {sa2_set_pitchbend_range(SA2_PB_FULL); return;}							// E2 - F#2: set pitchbend range
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	2b36      	cmp	r3, #54	; 0x36
 8000eb0:	d103      	bne.n	8000eba <handle_midi_message+0x18e>
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f000 fc70 	bl	8001798 <sa2_set_pitchbend_range>
 8000eb8:	e04b      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 55) {sa2_glitch_m1(); return;}												// G2: mode 1 glitch
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	2b37      	cmp	r3, #55	; 0x37
 8000ebe:	d102      	bne.n	8000ec6 <handle_midi_message+0x19a>
 8000ec0:	f000 fce6 	bl	8001890 <sa2_glitch_m1>
 8000ec4:	e045      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 56) {sa2_glitch_m2(); return;}												// G#2: mode 2 glitch
 8000ec6:	79bb      	ldrb	r3, [r7, #6]
 8000ec8:	2b38      	cmp	r3, #56	; 0x38
 8000eca:	d102      	bne.n	8000ed2 <handle_midi_message+0x1a6>
 8000ecc:	f000 fcf0 	bl	80018b0 <sa2_glitch_m2>
 8000ed0:	e03f      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 58) {sa2_issue_reset(); return;}												// A#2: reset
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	2b3a      	cmp	r3, #58	; 0x3a
 8000ed6:	d102      	bne.n	8000ede <handle_midi_message+0x1b2>
 8000ed8:	f000 fd1a 	bl	8001910 <sa2_issue_reset>
 8000edc:	e039      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb == 59) {sa2_modulation_sync(); return;}											// B2: modulation reset
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	2b3b      	cmp	r3, #59	; 0x3b
 8000ee2:	d102      	bne.n	8000eea <handle_midi_message+0x1be>
 8000ee4:	f000 fcc6 	bl	8001874 <sa2_modulation_sync>
 8000ee8:	e033      	b.n	8000f52 <handle_midi_message+0x226>
		else if (fb >= 60 && fb < 65) {sa2_press_drum(fb - 60, SA2_NOTE_TRIGGER); return;}			// C3 - E3: drums
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	2b3b      	cmp	r3, #59	; 0x3b
 8000eee:	d90a      	bls.n	8000f06 <handle_midi_message+0x1da>
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	2b40      	cmp	r3, #64	; 0x40
 8000ef4:	d807      	bhi.n	8000f06 <handle_midi_message+0x1da>
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	3b3c      	subs	r3, #60	; 0x3c
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2102      	movs	r1, #2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fdf2 	bl	8001ae8 <sa2_press_drum>
 8000f04:	e025      	b.n	8000f52 <handle_midi_message+0x226>
	case 0x80:
		// Handle all keys here
		if(fb >= 65 && fb < (65+32)) { // Normal keys from F3 to C6
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	2b40      	cmp	r3, #64	; 0x40
 8000f0a:	d911      	bls.n	8000f30 <handle_midi_message+0x204>
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b60      	cmp	r3, #96	; 0x60
 8000f10:	d80e      	bhi.n	8000f30 <handle_midi_message+0x204>
			sa2_press_note(fb - 65, (cmd == 0x90) ? SA2_NOTE_PLAY : SA2_NOTE_STOP);
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	3b41      	subs	r3, #65	; 0x41
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b90      	cmp	r3, #144	; 0x90
 8000f1c:	bf14      	ite	ne
 8000f1e:	2301      	movne	r3, #1
 8000f20:	2300      	moveq	r3, #0
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f000 fd90 	bl	8001a4c <sa2_press_note>
		}
		else if (fb == 57) {sa2_glitch_m3(SA2_GLITCHM3_1_5_x, (cmd == 0x90) ? SA2_NOTE_PLAY : SA2_NOTE_STOP); return;}			// A2: mode 3 glitch
		break;
 8000f2c:	bf00      	nop
 8000f2e:	e00f      	b.n	8000f50 <handle_midi_message+0x224>
		else if (fb == 57) {sa2_glitch_m3(SA2_GLITCHM3_1_5_x, (cmd == 0x90) ? SA2_NOTE_PLAY : SA2_NOTE_STOP); return;}			// A2: mode 3 glitch
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	2b39      	cmp	r3, #57	; 0x39
 8000f34:	d10c      	bne.n	8000f50 <handle_midi_message+0x224>
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b90      	cmp	r3, #144	; 0x90
 8000f3a:	bf14      	ite	ne
 8000f3c:	2301      	movne	r3, #1
 8000f3e:	2300      	moveq	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4619      	mov	r1, r3
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 fcbf 	bl	80018c8 <sa2_glitch_m3>
 8000f4a:	e002      	b.n	8000f52 <handle_midi_message+0x226>
		break;
 8000f4c:	bf00      	nop
 8000f4e:	e000      	b.n	8000f52 <handle_midi_message+0x226>
		break;
 8000f50:	bf00      	nop
	}
}
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <__NVIC_GetPriorityGrouping>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4906      	ldr	r1, [pc, #24]	; (8000fa8 <__NVIC_EnableIRQ+0x34>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <sa2_gpio_init>:
#define SA2_MODBITS_FM_HIGH 4


// Initialization functions

void sa2_gpio_init() {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	// Turn on port A, B
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN;
 8001068:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <sa2_gpio_init+0x100>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a3d      	ldr	r2, [pc, #244]	; (8001164 <sa2_gpio_init+0x100>)
 800106e:	f043 030c 	orr.w	r3, r3, #12
 8001072:	6193      	str	r3, [r2, #24]

	// Configure PB8...PB15 as EXTI Input; these are key matrix outputs (from the SA-2 side)
	MODIFY_REG(AFIO->EXTICR[2],
 8001074:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <sa2_gpio_init+0x104>)
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	0c1b      	lsrs	r3, r3, #16
 800107a:	041b      	lsls	r3, r3, #16
 800107c:	4a3a      	ldr	r2, [pc, #232]	; (8001168 <sa2_gpio_init+0x104>)
 800107e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8001082:	f043 0311 	orr.w	r3, r3, #17
 8001086:	6113      	str	r3, [r2, #16]
			AFIO_EXTICR3_EXTI8 | AFIO_EXTICR3_EXTI9 | AFIO_EXTICR3_EXTI10 | AFIO_EXTICR3_EXTI11,
			AFIO_EXTICR3_EXTI8_PB | AFIO_EXTICR3_EXTI9_PB | AFIO_EXTICR3_EXTI10_PB | AFIO_EXTICR3_EXTI11_PB);
	MODIFY_REG(AFIO->EXTICR[3],
 8001088:	4b37      	ldr	r3, [pc, #220]	; (8001168 <sa2_gpio_init+0x104>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	041b      	lsls	r3, r3, #16
 8001090:	4a35      	ldr	r2, [pc, #212]	; (8001168 <sa2_gpio_init+0x104>)
 8001092:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8001096:	f043 0311 	orr.w	r3, r3, #17
 800109a:	6153      	str	r3, [r2, #20]
			AFIO_EXTICR4_EXTI12 | AFIO_EXTICR4_EXTI13 | AFIO_EXTICR4_EXTI14 | AFIO_EXTICR4_EXTI15,
			AFIO_EXTICR4_EXTI12_PB | AFIO_EXTICR4_EXTI13_PB | AFIO_EXTICR4_EXTI14_PB | AFIO_EXTICR4_EXTI15_PB);

	// PB8..PB15 EXTI, both rising edge and falling edge
	EXTI->IMR |=  0xFF << 8;
 800109c:	4b33      	ldr	r3, [pc, #204]	; (800116c <sa2_gpio_init+0x108>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a32      	ldr	r2, [pc, #200]	; (800116c <sa2_gpio_init+0x108>)
 80010a2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80010a6:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0xFF << 8;
 80010a8:	4b30      	ldr	r3, [pc, #192]	; (800116c <sa2_gpio_init+0x108>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4a2f      	ldr	r2, [pc, #188]	; (800116c <sa2_gpio_init+0x108>)
 80010ae:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80010b2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= 0xFF << 8;
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <sa2_gpio_init+0x108>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	4a2c      	ldr	r2, [pc, #176]	; (800116c <sa2_gpio_init+0x108>)
 80010ba:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80010be:	60d3      	str	r3, [r2, #12]

	// EXTI IRQ
	NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010c0:	f7ff ff4a 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff98 	bl	8001000 <NVIC_EncodePriority>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4619      	mov	r1, r3
 80010d4:	2017      	movs	r0, #23
 80010d6:	f7ff ff69 	bl	8000fac <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010da:	2017      	movs	r0, #23
 80010dc:	f7ff ff4a 	bl	8000f74 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010e0:	f7ff ff3a 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff88 	bl	8001000 <NVIC_EncodePriority>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4619      	mov	r1, r3
 80010f4:	2028      	movs	r0, #40	; 0x28
 80010f6:	f7ff ff59 	bl	8000fac <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fa:	2028      	movs	r0, #40	; 0x28
 80010fc:	f7ff ff3a 	bl	8000f74 <__NVIC_EnableIRQ>

	// Configure PA0...PA7 as outputs; these are key matrix inputs (from the SA-2 side)
	MODIFY_REG(GPIOA->CRL, 0x0000FFFF, GPIO_CRL_MODE0 | GPIO_CRL_MODE1 | GPIO_CRL_MODE2 | GPIO_CRL_MODE3);
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <sa2_gpio_init+0x10c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	041b      	lsls	r3, r3, #16
 8001108:	4a19      	ldr	r2, [pc, #100]	; (8001170 <sa2_gpio_init+0x10c>)
 800110a:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 800110e:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 8001112:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOA->CRL, 0xFFFF0000, GPIO_CRL_MODE4 | GPIO_CRL_MODE5 | GPIO_CRL_MODE6 | GPIO_CRL_MODE7);
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <sa2_gpio_init+0x10c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <sa2_gpio_init+0x10c>)
 800111c:	f043 534c 	orr.w	r3, r3, #855638016	; 0x33000000
 8001120:	f443 134c 	orr.w	r3, r3, #3342336	; 0x330000
 8001124:	6013      	str	r3, [r2, #0]

	//PB4: Glitch; low = no glitch, high - clock pause
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF4_Msk | GPIO_CRL_MODE4_Msk, (0 << GPIO_CRL_CNF4_Pos) | (3 << GPIO_CRL_MODE4_Pos));
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <sa2_gpio_init+0x110>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800112e:	4a11      	ldr	r2, [pc, #68]	; (8001174 <sa2_gpio_init+0x110>)
 8001130:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001134:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR |= GPIO_BSRR_BR4;
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <sa2_gpio_init+0x110>)
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <sa2_gpio_init+0x110>)
 800113c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001140:	6113      	str	r3, [r2, #16]

	//PB3: Reset; low = reset, high = no effect
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF3_Msk | GPIO_CRL_MODE3_Msk, (1 << GPIO_CRL_CNF3_Pos) | (3 << GPIO_CRL_MODE3_Pos));
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <sa2_gpio_init+0x110>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <sa2_gpio_init+0x110>)
 800114c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001150:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR |= GPIO_BSRR_BS3;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <sa2_gpio_init+0x110>)
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <sa2_gpio_init+0x110>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6113      	str	r3, [r2, #16]
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	40010400 	.word	0x40010400
 8001170:	40010800 	.word	0x40010800
 8001174:	40010c00 	.word	0x40010c00

08001178 <sa2_clock_init>:

void sa2_clock_init() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af02      	add	r7, sp, #8
	// Without the 1ms delays it works unstable for some reason;
	// Probably due to the adafruit si5351 pullup resistors being
	// too high? (10kOhm instead of 1k-4.7k)

	while(1) {
		i2c_reset_error();
 800117e:	f7ff f98b 	bl	8000498 <i2c_reset_error>
		si5351_setupPLL(SI5351_PLL_A, 27, 97, 125);
 8001182:	237d      	movs	r3, #125	; 0x7d
 8001184:	2261      	movs	r2, #97	; 0x61
 8001186:	211b      	movs	r1, #27
 8001188:	2000      	movs	r0, #0
 800118a:	f000 fd81 	bl	8001c90 <si5351_setupPLL>
		_delayMs(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f7ff fbbe 	bl	8000910 <_delayMs>
		si5351_setupMultisynth(0, 16, 0, 1, SI5351_R_DIV_2);
 8001194:	2310      	movs	r3, #16
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2200      	movs	r2, #0
 800119c:	2110      	movs	r1, #16
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 fe74 	bl	8001e8c <si5351_setupMultisynth>
		_delayMs(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f7ff fbb3 	bl	8000910 <_delayMs>
		si5351_setMultisynthControl(0, SI5351_MS_EN, SI5351_PLL_A, SI5351_MS_NINV, SI5351_MS_MODE_FRAC, SI5351_OUTPUT_8MA);
 80011aa:	2303      	movs	r3, #3
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2340      	movs	r3, #64	; 0x40
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 fe27 	bl	8001e0c <si5351_setMultisynthControl>
		_delayMs(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff fba6 	bl	8000910 <_delayMs>
		si5351_enableOutput(0);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f000 ff13 	bl	8001ff0 <si5351_enableOutput>
		if(i2c_get_error() == 0) {
 80011ca:	f7ff f971 	bl	80004b0 <i2c_get_error>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <sa2_clock_init+0x6a>
			break;
		} else {
			GPIOC->ODR ^= GPIO_ODR_ODR13;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <sa2_clock_init+0x74>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <sa2_clock_init+0x74>)
 80011da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80011de:	60d3      	str	r3, [r2, #12]
		i2c_reset_error();
 80011e0:	e7cd      	b.n	800117e <sa2_clock_init+0x6>
			break;
 80011e2:	bf00      	nop
		}
	}
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40011000 	.word	0x40011000

080011f0 <sa2_timer_init>:

// This function initializes the TIM2 timer which is used for the modulation LFO
// Raw counter register is used as the current LFO state
void sa2_timer_init() {
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <sa2_timer_init+0x60>)
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	4a15      	ldr	r2, [pc, #84]	; (8001250 <sa2_timer_init+0x60>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	61d3      	str	r3, [r2, #28]
	// Default values of SMCR and CR2 registers are okay (Internal clock)
	// Up-down (center-aligned) mode, no clock division, ARPE set, everything else at default
	MODIFY_REG(TIM2->CR1, TIM_CR1_CMS_Msk | TIM_CR1_CKD_Msk, (3 << TIM_CR1_CMS_Pos) | (0 << TIM_CR1_CKD_Pos) | TIM_CR1_ARPE);
 8001200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 800120a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001212:	6013      	str	r3, [r2, #0]
	// ARR Changes the LFO bits (14 bits), PSC changes the LFO frequency
	TIM2->ARR = 16384;
 8001214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001218:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->PSC = _sa2_modrate_lut[0];
 800121e:	f245 52d5 	movw	r2, #21973	; 0x55d5
 8001222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->EGR |= TIM_EGR_UG; // Update the ARR and PSC
 8001228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6153      	str	r3, [r2, #20]
	// Finally, turn on the timer
	TIM2->CR1 |= TIM_CR1_CEN;
 8001238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000

08001254 <sa2_init>:

void sa2_init() {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	sa2_gpio_init();
 8001258:	f7ff ff04 	bl	8001064 <sa2_gpio_init>
	sa2_clock_init();
 800125c:	f7ff ff8c 	bl	8001178 <sa2_clock_init>
	sa2_timer_init();
 8001260:	f7ff ffc6 	bl	80011f0 <sa2_timer_init>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <sa2_handle_pins>:

// Handling functions

void sa2_handle_pins() {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	// To be called in EXTI interrupts
	uint8_t pinState = ((GPIOB->IDR) >> 8) & 0xFF; //Input PB8...PB15
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <sa2_handle_pins+0xb8>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	71bb      	strb	r3, [r7, #6]

	if(pinState == 0x00) { // No key matrix pins active
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d04c      	beq.n	8001316 <sa2_handle_pins+0xae>
		//GPIOA->BRR |= 0xFF; // Turn all key matrix inputs off
		return;
	}

	uint8_t pinFirst = __CLZ(pinState) - 24;	// Number of trailing zeros in an 8-bit number
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	3b18      	subs	r3, #24
 8001286:	71fb      	strb	r3, [r7, #7]
	pinFirst = 7 - pinFirst;					// Reverse this number, get the first 1 bit position from the right
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	71fb      	strb	r3, [r7, #7]

	uint8_t nBits = __builtin_popcount(pinState); // Number of active bits
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	4618      	mov	r0, r3
 8001294:	f7fe ff6c 	bl	8000170 <__popcountsi2>
 8001298:	4603      	mov	r3, r0
 800129a:	717b      	strb	r3, [r7, #5]

	// To prevent key matrix bugs, if nBits >= 2 ignore everything
	// Though nBits = 2 during switching
	if(nBits > 2) { // You may want to replace this with "nBits >= 2".
 800129c:	797b      	ldrb	r3, [r7, #5]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d906      	bls.n	80012b0 <sa2_handle_pins+0x48>
		GPIOA->BRR |= 0xFF;
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <sa2_handle_pins+0xbc>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <sa2_handle_pins+0xbc>)
 80012a8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80012ac:	6153      	str	r3, [r2, #20]
		return;
 80012ae:	e033      	b.n	8001318 <sa2_handle_pins+0xb0>

	// Edge case when key matrix switches from the last output to the first, during the transition both are active
	// Previous code would treat this situation as "last output active", not "first output active"
	// If in previous test >= 2 is coded, not > 2, then essentially this test will never occur.
	// In my case, when I try writing ">= 2", some keys (like digits 3 and 4) don't work stable.
	if(pinState == 0b10000001) {pinFirst = 0;}
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	2b81      	cmp	r3, #129	; 0x81
 80012b4:	d101      	bne.n	80012ba <sa2_handle_pins+0x52>
 80012b6:	2300      	movs	r3, #0
 80012b8:	71fb      	strb	r3, [r7, #7]

	// Finally, set the proper key matrix inputs on
	uint8_t p = outState[pinFirst];
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <sa2_handle_pins+0xc0>)
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	713b      	strb	r3, [r7, #4]
	GPIOA->BSRR |= ((~(uint32_t)p) << 16) | p; //Now isn't that obvious? :)
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <sa2_handle_pins+0xbc>)
 80012c4:	691a      	ldr	r2, [r3, #16]
 80012c6:	793b      	ldrb	r3, [r7, #4]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	0419      	lsls	r1, r3, #16
 80012cc:	793b      	ldrb	r3, [r7, #4]
 80012ce:	430b      	orrs	r3, r1
 80012d0:	4914      	ldr	r1, [pc, #80]	; (8001324 <sa2_handle_pins+0xbc>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	610b      	str	r3, [r1, #16]

	// Process the SA2_NOTE_TRIGGER conditions
	if(nBits == 1) {
 80012d6:	797b      	ldrb	r3, [r7, #5]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d11d      	bne.n	8001318 <sa2_handle_pins+0xb0>
		outState[pinFirst] &= ~(outState_reset[pinFirst]);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <sa2_handle_pins+0xc4>)
 80012e0:	5cd3      	ldrb	r3, [r2, r3]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	43d9      	mvns	r1, r3
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	4a0f      	ldr	r2, [pc, #60]	; (8001328 <sa2_handle_pins+0xc0>)
 80012ea:	5cd3      	ldrb	r3, [r2, r3]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	b25a      	sxtb	r2, r3
 80012f0:	b24b      	sxtb	r3, r1
 80012f2:	4013      	ands	r3, r2
 80012f4:	b25a      	sxtb	r2, r3
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	b2d1      	uxtb	r1, r2
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <sa2_handle_pins+0xc0>)
 80012fc:	54d1      	strb	r1, [r2, r3]
		outState_reset[pinFirst] = outState_trigger[pinFirst];
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	490b      	ldr	r1, [pc, #44]	; (8001330 <sa2_handle_pins+0xc8>)
 8001304:	5c8a      	ldrb	r2, [r1, r2]
 8001306:	b2d1      	uxtb	r1, r2
 8001308:	4a08      	ldr	r2, [pc, #32]	; (800132c <sa2_handle_pins+0xc4>)
 800130a:	54d1      	strb	r1, [r2, r3]
		outState_trigger[pinFirst] = 0;
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <sa2_handle_pins+0xc8>)
 8001310:	2100      	movs	r1, #0
 8001312:	54d1      	strb	r1, [r2, r3]
 8001314:	e000      	b.n	8001318 <sa2_handle_pins+0xb0>
		return;
 8001316:	bf00      	nop
	}
}
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40010c00 	.word	0x40010c00
 8001324:	40010800 	.word	0x40010800
 8001328:	20000028 	.word	0x20000028
 800132c:	20000030 	.word	0x20000030
 8001330:	20000038 	.word	0x20000038

08001334 <sa2_update_clock>:

void sa2_update_clock() {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af02      	add	r7, sp, #8
	if (_sa2_glitchclk != 0) {
 800133a:	4ba7      	ldr	r3, [pc, #668]	; (80015d8 <sa2_update_clock+0x2a4>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d021      	beq.n	8001388 <sa2_update_clock+0x54>
		if (_sa2_glitchclk == 1) {si5351_setupMultisynth(0, 12, 0, 1, 0);}
 8001344:	4ba4      	ldr	r3, [pc, #656]	; (80015d8 <sa2_update_clock+0x2a4>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d108      	bne.n	8001360 <sa2_update_clock+0x2c>
 800134e:	2300      	movs	r3, #0
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	2200      	movs	r2, #0
 8001356:	210c      	movs	r1, #12
 8001358:	2000      	movs	r0, #0
 800135a:	f000 fd97 	bl	8001e8c <si5351_setupMultisynth>
 800135e:	e007      	b.n	8001370 <sa2_update_clock+0x3c>
		else {si5351_setupMultisynth(0, 8, 0, 1, 0);}
 8001360:	2300      	movs	r3, #0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	2200      	movs	r2, #0
 8001368:	2108      	movs	r1, #8
 800136a:	2000      	movs	r0, #0
 800136c:	f000 fd8e 	bl	8001e8c <si5351_setupMultisynth>
		if ((_sa2_glitchclk & (1 << 3)) != 0) {
 8001370:	4b99      	ldr	r3, [pc, #612]	; (80015d8 <sa2_update_clock+0x2a4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 81da 	beq.w	8001734 <sa2_update_clock+0x400>
			_sa2_glitchclk = 0;
 8001380:	4b95      	ldr	r3, [pc, #596]	; (80015d8 <sa2_update_clock+0x2a4>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
		}
		return;
 8001386:	e1d5      	b.n	8001734 <sa2_update_clock+0x400>
	}

	if (_sa2_glitchm1m2 == 1) {
 8001388:	4b94      	ldr	r3, [pc, #592]	; (80015dc <sa2_update_clock+0x2a8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d121      	bne.n	80013d6 <sa2_update_clock+0xa2>
		// Mode 1 glitch. Push some impulses into the clock pin
		for(uint8_t i = 0; i < 0xFE; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	75fb      	strb	r3, [r7, #23]
 8001396:	e011      	b.n	80013bc <sa2_update_clock+0x88>
			GPIOB->ODR ^= GPIO_ODR_ODR4;
 8001398:	4b91      	ldr	r3, [pc, #580]	; (80015e0 <sa2_update_clock+0x2ac>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4a90      	ldr	r2, [pc, #576]	; (80015e0 <sa2_update_clock+0x2ac>)
 800139e:	f083 0310 	eor.w	r3, r3, #16
 80013a2:	60d3      	str	r3, [r2, #12]
			for(uint8_t j = 0; j < 32; j++) {};
 80013a4:	2300      	movs	r3, #0
 80013a6:	75bb      	strb	r3, [r7, #22]
 80013a8:	e002      	b.n	80013b0 <sa2_update_clock+0x7c>
 80013aa:	7dbb      	ldrb	r3, [r7, #22]
 80013ac:	3301      	adds	r3, #1
 80013ae:	75bb      	strb	r3, [r7, #22]
 80013b0:	7dbb      	ldrb	r3, [r7, #22]
 80013b2:	2b1f      	cmp	r3, #31
 80013b4:	d9f9      	bls.n	80013aa <sa2_update_clock+0x76>
		for(uint8_t i = 0; i < 0xFE; i++) {
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	3301      	adds	r3, #1
 80013ba:	75fb      	strb	r3, [r7, #23]
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2bfd      	cmp	r3, #253	; 0xfd
 80013c0:	d9ea      	bls.n	8001398 <sa2_update_clock+0x64>
		}
		GPIOB->BSRR |= GPIO_BSRR_BR4;
 80013c2:	4b87      	ldr	r3, [pc, #540]	; (80015e0 <sa2_update_clock+0x2ac>)
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	4a86      	ldr	r2, [pc, #536]	; (80015e0 <sa2_update_clock+0x2ac>)
 80013c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013cc:	6113      	str	r3, [r2, #16]
		_sa2_glitchm1m2 = 0;
 80013ce:	4b83      	ldr	r3, [pc, #524]	; (80015dc <sa2_update_clock+0x2a8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	e046      	b.n	8001464 <sa2_update_clock+0x130>
	} else if (_sa2_glitchm1m2 == 2) {
 80013d6:	4b81      	ldr	r3, [pc, #516]	; (80015dc <sa2_update_clock+0x2a8>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d141      	bne.n	8001464 <sa2_update_clock+0x130>
		static uint16_t noise = 0xABCD;
		// Push some noise into the clock pin
		for(uint8_t i = 0; i < 0xFE; i++) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	757b      	strb	r3, [r7, #21]
 80013e4:	e032      	b.n	800144c <sa2_update_clock+0x118>
			noise = (noise >> 0x1U) ^ (-(noise & 0x1U) & 0xB400U);
 80013e6:	4b7f      	ldr	r3, [pc, #508]	; (80015e4 <sa2_update_clock+0x2b0>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b7d      	ldr	r3, [pc, #500]	; (80015e4 <sa2_update_clock+0x2b0>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	425b      	negs	r3, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	f423 4397 	bic.w	r3, r3, #19328	; 0x4b80
 8001400:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001404:	b29b      	uxth	r3, r3
 8001406:	4053      	eors	r3, r2
 8001408:	b29a      	uxth	r2, r3
 800140a:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <sa2_update_clock+0x2b0>)
 800140c:	801a      	strh	r2, [r3, #0]
			if((noise & 0b1) == 0) {
 800140e:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <sa2_update_clock+0x2b0>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <sa2_update_clock+0xf4>
				GPIOB->BSRR |= GPIO_BSRR_BR4;
 800141a:	4b71      	ldr	r3, [pc, #452]	; (80015e0 <sa2_update_clock+0x2ac>)
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	4a70      	ldr	r2, [pc, #448]	; (80015e0 <sa2_update_clock+0x2ac>)
 8001420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001424:	6113      	str	r3, [r2, #16]
 8001426:	e005      	b.n	8001434 <sa2_update_clock+0x100>
			} else {
				GPIOB->BSRR |= GPIO_BSRR_BS4;
 8001428:	4b6d      	ldr	r3, [pc, #436]	; (80015e0 <sa2_update_clock+0x2ac>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	4a6c      	ldr	r2, [pc, #432]	; (80015e0 <sa2_update_clock+0x2ac>)
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	6113      	str	r3, [r2, #16]
			}
			for(uint8_t j = 0; j < 32; j++) {};
 8001434:	2300      	movs	r3, #0
 8001436:	753b      	strb	r3, [r7, #20]
 8001438:	e002      	b.n	8001440 <sa2_update_clock+0x10c>
 800143a:	7d3b      	ldrb	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	753b      	strb	r3, [r7, #20]
 8001440:	7d3b      	ldrb	r3, [r7, #20]
 8001442:	2b1f      	cmp	r3, #31
 8001444:	d9f9      	bls.n	800143a <sa2_update_clock+0x106>
		for(uint8_t i = 0; i < 0xFE; i++) {
 8001446:	7d7b      	ldrb	r3, [r7, #21]
 8001448:	3301      	adds	r3, #1
 800144a:	757b      	strb	r3, [r7, #21]
 800144c:	7d7b      	ldrb	r3, [r7, #21]
 800144e:	2bfd      	cmp	r3, #253	; 0xfd
 8001450:	d9c9      	bls.n	80013e6 <sa2_update_clock+0xb2>
		}
		GPIOB->BSRR |= GPIO_BSRR_BR4;
 8001452:	4b63      	ldr	r3, [pc, #396]	; (80015e0 <sa2_update_clock+0x2ac>)
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	4a62      	ldr	r2, [pc, #392]	; (80015e0 <sa2_update_clock+0x2ac>)
 8001458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800145c:	6113      	str	r3, [r2, #16]
		_sa2_glitchm1m2 = 0;
 800145e:	4b5f      	ldr	r3, [pc, #380]	; (80015dc <sa2_update_clock+0x2a8>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
	}


	uint16_t lfoValue = TIM2->CNT;
 8001464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	827b      	strh	r3, [r7, #18]

	if(_sa2_modtype == SA2_MOD_FM) {lfoValue = 0x3FFF & (lfoValue * (((1 << 14) - 1) / ((1 << SA2_MODBITS_FM) - 1)));} 					// lfoValue * (16383 / 127) in case of SA_MODBITS_FM = 7
 800146c:	4b5e      	ldr	r3, [pc, #376]	; (80015e8 <sa2_update_clock+0x2b4>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d108      	bne.n	8001488 <sa2_update_clock+0x154>
 8001476:	8a7b      	ldrh	r3, [r7, #18]
 8001478:	461a      	mov	r2, r3
 800147a:	01d2      	lsls	r2, r2, #7
 800147c:	4413      	add	r3, r2
 800147e:	b29b      	uxth	r3, r3
 8001480:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001484:	827b      	strh	r3, [r7, #18]
 8001486:	e010      	b.n	80014aa <sa2_update_clock+0x176>
	else if(_sa2_modtype == SA2_MOD_FM_HIGH) {lfoValue = 0x3FFF & (lfoValue * (((1 << 14) - 1) / ((1 << SA2_MODBITS_FM_HIGH) - 1)));}	// Just shifting bits is wrong
 8001488:	4b57      	ldr	r3, [pc, #348]	; (80015e8 <sa2_update_clock+0x2b4>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d10b      	bne.n	80014aa <sa2_update_clock+0x176>
 8001492:	8a7b      	ldrh	r3, [r7, #18]
 8001494:	461a      	mov	r2, r3
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	441a      	add	r2, r3
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 80014a6:	4013      	ands	r3, r2
 80014a8:	827b      	strh	r3, [r7, #18]

	uint16_t modValue = _sa2_modulation;
 80014aa:	4b50      	ldr	r3, [pc, #320]	; (80015ec <sa2_update_clock+0x2b8>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	817b      	strh	r3, [r7, #10]
	lfoValue = 0x3FFF & (((int32_t)(lfoValue) - 0x2000L) * ((int32_t)modValue) / 127 + 0x2000L); // Convert to signed int, multiply, back to unsigned, make sure it's 14-bit
 80014b2:	8a7b      	ldrh	r3, [r7, #18]
 80014b4:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80014b8:	897a      	ldrh	r2, [r7, #10]
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	4a4c      	ldr	r2, [pc, #304]	; (80015f0 <sa2_update_clock+0x2bc>)
 80014c0:	fb82 1203 	smull	r1, r2, r2, r3
 80014c4:	441a      	add	r2, r3
 80014c6:	1192      	asrs	r2, r2, #6
 80014c8:	17db      	asrs	r3, r3, #31
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80014d8:	827b      	strh	r3, [r7, #18]


	_sa2_pitchbend &= 0x3FFF;
 80014da:	4b46      	ldr	r3, [pc, #280]	; (80015f4 <sa2_update_clock+0x2c0>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <sa2_update_clock+0x2c0>)
 80014e8:	801a      	strh	r2, [r3, #0]
	_sa2_current_octave &= 3;
 80014ea:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <sa2_update_clock+0x2c4>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <sa2_update_clock+0x2c4>)
 80014f8:	701a      	strb	r2, [r3, #0]

	uint8_t rDivValue = (3 - _sa2_current_octave) << 4; // See Si5351.h
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <sa2_update_clock+0x2c4>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f1c3 0303 	rsb	r3, r3, #3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	727b      	strb	r3, [r7, #9]
														// A switch-case will be more obvious, but
														// I am not sure that optimizer will optimize it to this

	uint16_t lut_low, lut_high;
	uint32_t full_pb = 0x7FFF & (lfoValue + _sa2_pitchbend); // uint32_t, because full range pitchbend requires it
 800150a:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <sa2_update_clock+0x2c0>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	b29a      	uxth	r2, r3
 8001510:	8a7b      	ldrh	r3, [r7, #18]
 8001512:	4413      	add	r3, r2
 8001514:	b29b      	uxth	r3, r3
 8001516:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800151a:	60fb      	str	r3, [r7, #12]
	uint32_t pb_final;

	switch(_sa2_pbrange) {
 800151c:	4b37      	ldr	r3, [pc, #220]	; (80015fc <sa2_update_clock+0x2c8>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d070      	beq.n	8001608 <sa2_update_clock+0x2d4>
 8001526:	2b02      	cmp	r3, #2
 8001528:	f000 80be 	beq.w	80016a8 <sa2_update_clock+0x374>
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 8102 	bne.w	8001736 <sa2_update_clock+0x402>
		case SA2_PB_FULLTONE:
			// First SA2_FULLTONE_LUT_BITS of the 14-bit number represent the
			// Current interval of the LUT
			// LUT order is inverted, so we invert the lut_low and lut_high here
			lut_low = _sa2_pb_lut_fulltone[SA2_FULLTONE_LUT_INT(full_pb) + 1];
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	3301      	adds	r3, #1
 8001538:	4a31      	ldr	r2, [pc, #196]	; (8001600 <sa2_update_clock+0x2cc>)
 800153a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153e:	80fb      	strh	r3, [r7, #6]
			lut_high = _sa2_pb_lut_fulltone[SA2_FULLTONE_LUT_INT(full_pb)];
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <sa2_update_clock+0x2cc>)
 8001546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800154a:	80bb      	strh	r3, [r7, #4]

			// Last (14 - SA2_FULLTONE_LUT_BITS) of the 14-bit pitchbend represent the
			// current position in the LUT interval
			pb_final = SA2_FULLTONE_LUT_SUBTRACT + lut_low + (uint32_t)SA2_FULLTONE_LUT_POS(full_pb) * (uint32_t)(lut_high - lut_low) / (uint32_t)SA2_FULLTONE_LUT_INTLEN;
 800154c:	88fa      	ldrh	r2, [r7, #6]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43db      	mvns	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	88b8      	ldrh	r0, [r7, #4]
 8001556:	88f9      	ldrh	r1, [r7, #6]
 8001558:	1a41      	subs	r1, r0, r1
 800155a:	fb01 f303 	mul.w	r3, r1, r3
 800155e:	4929      	ldr	r1, [pc, #164]	; (8001604 <sa2_update_clock+0x2d0>)
 8001560:	fba1 1303 	umull	r1, r3, r1, r3
 8001564:	09db      	lsrs	r3, r3, #7
 8001566:	4413      	add	r3, r2
 8001568:	f503 53b3 	add.w	r3, r3, #5728	; 0x1660
 800156c:	603b      	str	r3, [r7, #0]

			// 16 is the midpoint of the pitchbend. Check if we are over it on octaved 3, pitchbend/mod up is disabled on it
			// Try commenting the next check, maybe your sa-2 wants to overclock.
			if((SA2_FULLTONE_LUT_MINVAL + (pb_final >> SA2_FULLTONE_LUT_PRECISION) < 16) && (_sa2_current_octave == 3)) {
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	0b5b      	lsrs	r3, r3, #13
 8001572:	330c      	adds	r3, #12
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d80d      	bhi.n	8001594 <sa2_update_clock+0x260>
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <sa2_update_clock+0x2c4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b03      	cmp	r3, #3
 8001580:	d108      	bne.n	8001594 <sa2_update_clock+0x260>
				si5351_setupMultisynth(0, 16, 0, 1, rDivValue);
 8001582:	7a7b      	ldrb	r3, [r7, #9]
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	2200      	movs	r2, #0
 800158a:	2110      	movs	r1, #16
 800158c:	2000      	movs	r0, #0
 800158e:	f000 fc7d 	bl	8001e8c <si5351_setupMultisynth>
				return;
 8001592:	e0d0      	b.n	8001736 <sa2_update_clock+0x402>
			}

			// My SA-2 Does not want to underclock even one bit under x4 underclocking, so disable the pitchbend down on the lowest octave
			if((SA2_FULLTONE_LUT_MINVAL + (pb_final >> SA2_FULLTONE_LUT_PRECISION) > 16) && (_sa2_current_octave == 0)) {
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	0b5b      	lsrs	r3, r3, #13
 8001598:	330c      	adds	r3, #12
 800159a:	2b10      	cmp	r3, #16
 800159c:	d90d      	bls.n	80015ba <sa2_update_clock+0x286>
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <sa2_update_clock+0x2c4>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d108      	bne.n	80015ba <sa2_update_clock+0x286>
				si5351_setupMultisynth(0, 16, 0, 1, rDivValue);
 80015a8:	7a7b      	ldrb	r3, [r7, #9]
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2301      	movs	r3, #1
 80015ae:	2200      	movs	r2, #0
 80015b0:	2110      	movs	r1, #16
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 fc6a 	bl	8001e8c <si5351_setupMultisynth>
				return;
 80015b8:	e0bd      	b.n	8001736 <sa2_update_clock+0x402>
			}

			si5351_setupMultisynth(0,
					SA2_FULLTONE_LUT_MINVAL + (pb_final >> SA2_FULLTONE_LUT_PRECISION), // Integer part
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	0b5b      	lsrs	r3, r3, #13
			si5351_setupMultisynth(0,
 80015be:	f103 010c 	add.w	r1, r3, #12
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80015c8:	7a7b      	ldrb	r3, [r7, #9]
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d0:	2000      	movs	r0, #0
 80015d2:	f000 fc5b 	bl	8001e8c <si5351_setupMultisynth>
					pb_final & ((1 << SA2_FULLTONE_LUT_PRECISION) - 1),					// Numerator
					1 << SA2_FULLTONE_LUT_PRECISION,									// Denominator
					rDivValue);															// Additional division controlled by the current octave
			break;
 80015d6:	e0ae      	b.n	8001736 <sa2_update_clock+0x402>
 80015d8:	20000044 	.word	0x20000044
 80015dc:	20000043 	.word	0x20000043
 80015e0:	40010c00 	.word	0x40010c00
 80015e4:	20000004 	.word	0x20000004
 80015e8:	20000042 	.word	0x20000042
 80015ec:	20000040 	.word	0x20000040
 80015f0:	81020409 	.word	0x81020409
 80015f4:	20000002 	.word	0x20000002
 80015f8:	20000001 	.word	0x20000001
 80015fc:	20000041 	.word	0x20000041
 8001600:	0800216c 	.word	0x0800216c
 8001604:	80808081 	.word	0x80808081
		case SA2_PB_OCTAVE:
			// All LUT calculations are similar to the SA2_PB_FULLTONE calculations.
			lut_low = _sa2_pb_lut_octave[SA2_OCTAVE_LUT_INT(full_pb) + 1];
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	3301      	adds	r3, #1
 800160e:	4a4b      	ldr	r2, [pc, #300]	; (800173c <sa2_update_clock+0x408>)
 8001610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001614:	80fb      	strh	r3, [r7, #6]
			lut_high = _sa2_pb_lut_octave[SA2_OCTAVE_LUT_INT(full_pb)];
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	4a48      	ldr	r2, [pc, #288]	; (800173c <sa2_update_clock+0x408>)
 800161c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001620:	80bb      	strh	r3, [r7, #4]
			pb_final = SA2_OCTAVE_LUT_SUBTRACT + lut_low + (uint32_t)SA2_OCTAVE_LUT_POS(full_pb) * (uint32_t)(lut_high - lut_low) / (uint32_t)SA2_OCTAVE_LUT_INTLEN;
 8001622:	88fa      	ldrh	r2, [r7, #6]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	43db      	mvns	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	88b8      	ldrh	r0, [r7, #4]
 800162c:	88f9      	ldrh	r1, [r7, #6]
 800162e:	1a41      	subs	r1, r0, r1
 8001630:	fb01 f303 	mul.w	r3, r1, r3
 8001634:	4942      	ldr	r1, [pc, #264]	; (8001740 <sa2_update_clock+0x40c>)
 8001636:	fba1 1303 	umull	r1, r3, r1, r3
 800163a:	09db      	lsrs	r3, r3, #7
 800163c:	4413      	add	r3, r2
 800163e:	603b      	str	r3, [r7, #0]

			// See these two checks above.
			if((SA2_OCTAVE_LUT_MINVAL + (pb_final >> SA2_OCTAVE_LUT_PRECISION) < 16) && (_sa2_current_octave == 3)) {
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	0a9b      	lsrs	r3, r3, #10
 8001644:	3304      	adds	r3, #4
 8001646:	2b0f      	cmp	r3, #15
 8001648:	d80d      	bhi.n	8001666 <sa2_update_clock+0x332>
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <sa2_update_clock+0x410>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b03      	cmp	r3, #3
 8001652:	d108      	bne.n	8001666 <sa2_update_clock+0x332>
				si5351_setupMultisynth(0, 16, 0, 1, rDivValue);
 8001654:	7a7b      	ldrb	r3, [r7, #9]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	2200      	movs	r2, #0
 800165c:	2110      	movs	r1, #16
 800165e:	2000      	movs	r0, #0
 8001660:	f000 fc14 	bl	8001e8c <si5351_setupMultisynth>
				return;
 8001664:	e067      	b.n	8001736 <sa2_update_clock+0x402>
			}
			if((SA2_OCTAVE_LUT_MINVAL + (pb_final >> SA2_OCTAVE_LUT_PRECISION) > 16) && (_sa2_current_octave == 0)) {
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	0a9b      	lsrs	r3, r3, #10
 800166a:	3304      	adds	r3, #4
 800166c:	2b10      	cmp	r3, #16
 800166e:	d90d      	bls.n	800168c <sa2_update_clock+0x358>
 8001670:	4b34      	ldr	r3, [pc, #208]	; (8001744 <sa2_update_clock+0x410>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d108      	bne.n	800168c <sa2_update_clock+0x358>
				si5351_setupMultisynth(0, 16, 0, 1, rDivValue);
 800167a:	7a7b      	ldrb	r3, [r7, #9]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	2200      	movs	r2, #0
 8001682:	2110      	movs	r1, #16
 8001684:	2000      	movs	r0, #0
 8001686:	f000 fc01 	bl	8001e8c <si5351_setupMultisynth>
				return;
 800168a:	e054      	b.n	8001736 <sa2_update_clock+0x402>
			}

			si5351_setupMultisynth(0,
					SA2_OCTAVE_LUT_MINVAL + (pb_final >> SA2_OCTAVE_LUT_PRECISION), // Integer part
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	0a9b      	lsrs	r3, r3, #10
			si5351_setupMultisynth(0,
 8001690:	1d19      	adds	r1, r3, #4
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001698:	7a7b      	ldrb	r3, [r7, #9]
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 fbf3 	bl	8001e8c <si5351_setupMultisynth>
					pb_final & ((1 << SA2_OCTAVE_LUT_PRECISION) - 1),				// Numerator
					1 << SA2_OCTAVE_LUT_PRECISION,									// Denominator
					rDivValue);
			break;
 80016a6:	e046      	b.n	8001736 <sa2_update_clock+0x402>
		case SA2_PB_FULL:
			// All LUT calculations are similar to the SA2_PB_FULLTONE calculations.
			// But! LUT input here is 14-bit, and modulation is truncated (full_pb is converted)

			if(full_pb < 0x2000) {full_pb = 0x2000;}
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ae:	d203      	bcs.n	80016b8 <sa2_update_clock+0x384>
 80016b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	e00d      	b.n	80016d4 <sa2_update_clock+0x3a0>
			else if (full_pb >= 0x6000) {full_pb = 0x6000 - 1;}
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80016be:	d303      	bcc.n	80016c8 <sa2_update_clock+0x394>
 80016c0:	f645 73ff 	movw	r3, #24575	; 0x5fff
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	e005      	b.n	80016d4 <sa2_update_clock+0x3a0>
			else {full_pb = 0x3FFF & (full_pb - 0x2000);} // Bitwise & added just in case
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80016ce:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016d2:	60fb      	str	r3, [r7, #12]

			lut_low = _sa2_pb_lut_full[SA2_FULL_LUT_INT(full_pb) + 1];
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	09db      	lsrs	r3, r3, #7
 80016d8:	3301      	adds	r3, #1
 80016da:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <sa2_update_clock+0x414>)
 80016dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e0:	80fb      	strh	r3, [r7, #6]
			lut_high = _sa2_pb_lut_full[SA2_FULL_LUT_INT(full_pb)];
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	09db      	lsrs	r3, r3, #7
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <sa2_update_clock+0x414>)
 80016e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ec:	80bb      	strh	r3, [r7, #4]
			pb_final = SA2_FULL_LUT_SUBTRACT + lut_low + (uint32_t)SA2_FULL_LUT_POS(full_pb) * (uint32_t)(lut_high - lut_low) / (uint32_t)SA2_FULL_LUT_INTLEN;
 80016ee:	88f9      	ldrh	r1, [r7, #6]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016f8:	88b8      	ldrh	r0, [r7, #4]
 80016fa:	88fa      	ldrh	r2, [r7, #6]
 80016fc:	1a82      	subs	r2, r0, r2
 80016fe:	fb02 f203 	mul.w	r2, r2, r3
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <sa2_update_clock+0x418>)
 8001704:	fba3 0302 	umull	r0, r3, r3, r2
 8001708:	1ad2      	subs	r2, r2, r3
 800170a:	0852      	lsrs	r2, r2, #1
 800170c:	4413      	add	r3, r2
 800170e:	099b      	lsrs	r3, r3, #6
 8001710:	440b      	add	r3, r1
 8001712:	603b      	str	r3, [r7, #0]

			si5351_setupMultisynth(0,
					SA2_FULL_LUT_MINVAL + (pb_final >> SA2_FULL_LUT_PRECISION), // Integer part
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	0a5b      	lsrs	r3, r3, #9
			si5351_setupMultisynth(0,
 8001718:	f103 0110 	add.w	r1, r3, #16
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001722:	2300      	movs	r3, #0
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800172a:	2000      	movs	r0, #0
 800172c:	f000 fbae 	bl	8001e8c <si5351_setupMultisynth>
					pb_final & ((1 << SA2_FULL_LUT_PRECISION) - 1),				// Numerator
					1 << SA2_FULL_LUT_PRECISION,								// Denominator
					SI5351_R_DIV_1);
			break;
 8001730:	bf00      	nop
 8001732:	e000      	b.n	8001736 <sa2_update_clock+0x402>
		return;
 8001734:	bf00      	nop
	}
}
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	08002270 	.word	0x08002270
 8001740:	80808081 	.word	0x80808081
 8001744:	20000001 	.word	0x20000001
 8001748:	08002374 	.word	0x08002374
 800174c:	02040811 	.word	0x02040811

08001750 <sa2_set_pitchbend>:

// Pitchbend, mod, octave setters
void sa2_set_pitchbend(uint16_t pb) {
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
	_sa2_pitchbend = pb & 0x3FFF;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b03      	ldr	r3, [pc, #12]	; (8001770 <sa2_set_pitchbend+0x20>)
 8001764:	801a      	strh	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	20000002 	.word	0x20000002

08001774 <sa2_set_octave>:

void sa2_set_octave(uint8_t oct) {
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	_sa2_current_octave = oct & 0x3;
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b03      	ldr	r3, [pc, #12]	; (8001794 <sa2_set_octave+0x20>)
 8001788:	701a      	strb	r2, [r3, #0]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	20000001 	.word	0x20000001

08001798 <sa2_set_pitchbend_range>:

void sa2_set_pitchbend_range(sa2_pb_range_t range) {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	_sa2_pbrange = range;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <sa2_set_pitchbend_range+0x1c>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	7013      	strb	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000041 	.word	0x20000041

080017b8 <sa2_set_modulation>:

void sa2_set_modulation(uint8_t mod) {
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
	_sa2_modulation = mod & 0x7F; // 7-bit
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <sa2_set_modulation+0x20>)
 80017cc:	701a      	strb	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	20000040 	.word	0x20000040

080017dc <sa2_set_modulation_rate>:

void sa2_set_modulation_rate(uint8_t mod) {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
	TIM2->PSC = _sa2_modrate_lut[mod & 0x7F]; // See sa2_lut.h
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ec:	4a05      	ldr	r2, [pc, #20]	; (8001804 <sa2_set_modulation_rate+0x28>)
 80017ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	08002478 	.word	0x08002478

08001808 <sa2_set_modulation_type>:

void sa2_set_modulation_type(sa2_mod_type_t modtype) {
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
	if (_sa2_modtype == modtype) {return;}
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <sa2_set_modulation_type+0x68>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	79fa      	ldrb	r2, [r7, #7]
 800181a:	429a      	cmp	r2, r3
 800181c:	d023      	beq.n	8001866 <sa2_set_modulation_type+0x5e>
	if(modtype == SA2_MOD_VIBRATO) {TIM2->ARR = 0b1UL << 14;}
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <sa2_set_modulation_type+0x28>
 8001824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001828:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c
 800182e:	e00e      	b.n	800184e <sa2_set_modulation_type+0x46>
	else if (modtype == SA2_MOD_FM) {TIM2->ARR = 0b1UL << SA2_MODBITS_FM;}
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d104      	bne.n	8001840 <sa2_set_modulation_type+0x38>
 8001836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c
 800183e:	e006      	b.n	800184e <sa2_set_modulation_type+0x46>
	else if (modtype == SA2_MOD_FM_HIGH) {TIM2->ARR = 0b1 << SA2_MODBITS_FM_HIGH;}
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d103      	bne.n	800184e <sa2_set_modulation_type+0x46>
 8001846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800184a:	2210      	movs	r2, #16
 800184c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800184e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6153      	str	r3, [r2, #20]
	_sa2_modtype = modtype;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <sa2_set_modulation_type+0x68>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	7013      	strb	r3, [r2, #0]
 8001864:	e000      	b.n	8001868 <sa2_set_modulation_type+0x60>
	if (_sa2_modtype == modtype) {return;}
 8001866:	bf00      	nop
}
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000042 	.word	0x20000042

08001874 <sa2_modulation_sync>:

void sa2_modulation_sync(void) {
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	TIM2->EGR |= TIM_EGR_UG;
 8001878:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6153      	str	r3, [r2, #20]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <sa2_glitch_m1>:

// Glitch, reset, polyphony

void sa2_glitch_m1() {
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
	if(_sa2_glitchm1m2 != 2) {_sa2_glitchm1m2 = 1;}
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <sa2_glitch_m1+0x1c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d002      	beq.n	80018a4 <sa2_glitch_m1+0x14>
 800189e:	4b03      	ldr	r3, [pc, #12]	; (80018ac <sa2_glitch_m1+0x1c>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	20000043 	.word	0x20000043

080018b0 <sa2_glitch_m2>:

void sa2_glitch_m2() {
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
	_sa2_glitchm1m2 = 2;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <sa2_glitch_m2+0x14>)
 80018b6:	2202      	movs	r2, #2
 80018b8:	701a      	strb	r2, [r3, #0]
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000043 	.word	0x20000043

080018c8 <sa2_glitch_m3>:

void sa2_glitch_m3(sa2_glitchm3_type_t type, sa2_note_state_t st) {
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
	if(st == SA2_NOTE_STOP) {
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d103      	bne.n	80018e6 <sa2_glitch_m3+0x1e>
		_sa2_glitchclk = 0;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <sa2_glitch_m3+0x44>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
		_sa2_glitchclk = type;
		if(st == SA2_NOTE_TRIGGER) {
			_sa2_glitchclk |= 1 << 3;
		}
	}
}
 80018e4:	e00d      	b.n	8001902 <sa2_glitch_m3+0x3a>
		_sa2_glitchclk = type;
 80018e6:	4a09      	ldr	r2, [pc, #36]	; (800190c <sa2_glitch_m3+0x44>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	7013      	strb	r3, [r2, #0]
		if(st == SA2_NOTE_TRIGGER) {
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d107      	bne.n	8001902 <sa2_glitch_m3+0x3a>
			_sa2_glitchclk |= 1 << 3;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <sa2_glitch_m3+0x44>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b03      	ldr	r3, [pc, #12]	; (800190c <sa2_glitch_m3+0x44>)
 8001900:	701a      	strb	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000044 	.word	0x20000044

08001910 <sa2_issue_reset>:

void sa2_issue_reset() {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
	GPIOB->BSRR |= GPIO_BSRR_BR3;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <sa2_issue_reset+0x40>)
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <sa2_issue_reset+0x40>)
 800191c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001920:	6113      	str	r3, [r2, #16]
	for(uint16_t i = 0; i < 0xFFE; i++) {}
 8001922:	2300      	movs	r3, #0
 8001924:	80fb      	strh	r3, [r7, #6]
 8001926:	e002      	b.n	800192e <sa2_issue_reset+0x1e>
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	3301      	adds	r3, #1
 800192c:	80fb      	strh	r3, [r7, #6]
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	f640 72fd 	movw	r2, #4093	; 0xffd
 8001934:	4293      	cmp	r3, r2
 8001936:	d9f7      	bls.n	8001928 <sa2_issue_reset+0x18>
	GPIOB->BSRR |= GPIO_BSRR_BS3;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <sa2_issue_reset+0x40>)
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <sa2_issue_reset+0x40>)
 800193e:	f043 0308 	orr.w	r3, r3, #8
 8001942:	6113      	str	r3, [r2, #16]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40010c00 	.word	0x40010c00

08001954 <sa2_set_poly>:
	_sa2_glitchm1m2 = 0;
	_delayMs(10);
	sa2_issue_reset();
}

void sa2_set_poly(sa2_poly_t p) {
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	if(p == SA2_POLY_2) {
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d108      	bne.n	8001976 <sa2_set_poly+0x22>
		outState[7] &= ~(1 << 7);
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <sa2_set_poly+0x3c>)
 8001966:	79db      	ldrb	r3, [r3, #7]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <sa2_set_poly+0x3c>)
 8001972:	71da      	strb	r2, [r3, #7]
	} else {
		outState[7] |= (1 << 7);
	}
}
 8001974:	e007      	b.n	8001986 <sa2_set_poly+0x32>
		outState[7] |= (1 << 7);
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <sa2_set_poly+0x3c>)
 8001978:	79db      	ldrb	r3, [r3, #7]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b03      	ldr	r3, [pc, #12]	; (8001990 <sa2_set_poly+0x3c>)
 8001984:	71da      	strb	r2, [r3, #7]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000028 	.word	0x20000028

08001994 <sa2_key_set>:

void sa2_set_keystate(uint8_t kO, uint8_t kI) {
	outState[kO] = (outState[kO] & 0xFF00) | kI;
}

void sa2_key_set(uint8_t kO, uint8_t bitMask, sa2_note_state_t st) {
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
 800199e:	460b      	mov	r3, r1
 80019a0:	71bb      	strb	r3, [r7, #6]
 80019a2:	4613      	mov	r3, r2
 80019a4:	717b      	strb	r3, [r7, #5]
	if(st == SA2_NOTE_STOP) {
 80019a6:	797b      	ldrb	r3, [r7, #5]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d10f      	bne.n	80019cc <sa2_key_set+0x38>
		outState[kO] &= ~bitMask;
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <sa2_key_set+0x70>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	b25a      	sxtb	r2, r3
 80019b6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	4013      	ands	r3, r2
 80019c0:	b25a      	sxtb	r2, r3
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	b2d1      	uxtb	r1, r2
 80019c6:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <sa2_key_set+0x70>)
 80019c8:	54d1      	strb	r1, [r2, r3]
		outState[kO] |=  bitMask;
		if (st == SA2_NOTE_TRIGGER) {
			outState_trigger[kO] |= bitMask;
		}
	}
}
 80019ca:	e016      	b.n	80019fa <sa2_key_set+0x66>
		outState[kO] |=  bitMask;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <sa2_key_set+0x70>)
 80019d0:	5cd3      	ldrb	r3, [r2, r3]
 80019d2:	b2d9      	uxtb	r1, r3
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	79ba      	ldrb	r2, [r7, #6]
 80019d8:	430a      	orrs	r2, r1
 80019da:	b2d1      	uxtb	r1, r2
 80019dc:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <sa2_key_set+0x70>)
 80019de:	54d1      	strb	r1, [r2, r3]
		if (st == SA2_NOTE_TRIGGER) {
 80019e0:	797b      	ldrb	r3, [r7, #5]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d109      	bne.n	80019fa <sa2_key_set+0x66>
			outState_trigger[kO] |= bitMask;
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <sa2_key_set+0x74>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	b2d9      	uxtb	r1, r3
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	79ba      	ldrb	r2, [r7, #6]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	b2d1      	uxtb	r1, r2
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <sa2_key_set+0x74>)
 80019f8:	54d1      	strb	r1, [r2, r3]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000028 	.word	0x20000028
 8001a08:	20000038 	.word	0x20000038

08001a0c <sa2_reset_all_keys>:

void sa2_press_keys(uint8_t kO, uint8_t kI, sa2_note_state_t st) {
	sa2_key_set(kO, kI, st);
}

void sa2_reset_all_keys() {
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 7; i++) {outState[i] = 0x0000U;}
 8001a12:	2300      	movs	r3, #0
 8001a14:	71fb      	strb	r3, [r7, #7]
 8001a16:	e006      	b.n	8001a26 <sa2_reset_all_keys+0x1a>
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <sa2_reset_all_keys+0x3c>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	54d1      	strb	r1, [r2, r3]
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	3301      	adds	r3, #1
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b06      	cmp	r3, #6
 8001a2a:	d9f5      	bls.n	8001a18 <sa2_reset_all_keys+0xc>
	outState[7] &= 0b1 << 7; // Don't touch the polyphony bit
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <sa2_reset_all_keys+0x3c>)
 8001a2e:	79db      	ldrb	r3, [r3, #7]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <sa2_reset_all_keys+0x3c>)
 8001a3a:	71da      	strb	r2, [r3, #7]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000028 	.word	0x20000028

08001a4c <sa2_press_note>:

// All the boring functions...

void sa2_press_note(uint8_t note, sa2_note_state_t st) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	460a      	mov	r2, r1
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	71bb      	strb	r3, [r7, #6]
	if(note > 31) {note = 31;}
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	2b1f      	cmp	r3, #31
 8001a60:	d901      	bls.n	8001a66 <sa2_press_note+0x1a>
 8001a62:	231f      	movs	r3, #31
 8001a64:	71fb      	strb	r3, [r7, #7]
	sa2_key_set(0 + (note >> 3), 1 << (note & 0b111), st);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	08db      	lsrs	r3, r3, #3
 8001a6a:	b2d8      	uxtb	r0, r3
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	2201      	movs	r2, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	79ba      	ldrb	r2, [r7, #6]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f7ff ff89 	bl	8001994 <sa2_key_set>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <sa2_press_digit>:

void sa2_press_digit(uint8_t digit, sa2_note_state_t st) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	460a      	mov	r2, r1
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	71bb      	strb	r3, [r7, #6]
	if(digit > 9) {digit = 9;}
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b09      	cmp	r3, #9
 8001aa0:	d901      	bls.n	8001aa6 <sa2_press_digit+0x1a>
 8001aa2:	2309      	movs	r3, #9
 8001aa4:	71fb      	strb	r3, [r7, #7]
	sa2_key_set(4 + digit / 5,  1 << (digit % 5), st);
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <sa2_press_digit+0x58>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	b2d8      	uxtb	r0, r3
 8001ab6:	79fa      	ldrb	r2, [r7, #7]
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <sa2_press_digit+0x58>)
 8001aba:	fba3 1302 	umull	r1, r3, r3, r2
 8001abe:	0899      	lsrs	r1, r3, #2
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	2301      	movs	r3, #1
 8001ace:	4093      	lsls	r3, r2
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	79ba      	ldrb	r2, [r7, #6]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <sa2_key_set>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	cccccccd 	.word	0xcccccccd

08001ae8 <sa2_press_drum>:

void sa2_press_drum(uint8_t drum, sa2_note_state_t st) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]
	if (drum > 4) {drum = 4;}
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d901      	bls.n	8001b02 <sa2_press_drum+0x1a>
 8001afe:	2304      	movs	r3, #4
 8001b00:	71fb      	strb	r3, [r7, #7]
	// BD, SN, HH are on kO 6
	// OH, CB are on kO 7
	sa2_key_set(6 + drum / 3, 1 << (drum % 3), st);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <sa2_press_drum+0x58>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	085b      	lsrs	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	3306      	adds	r3, #6
 8001b10:	b2d8      	uxtb	r0, r3
 8001b12:	79fa      	ldrb	r2, [r7, #7]
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <sa2_press_drum+0x58>)
 8001b16:	fba3 1302 	umull	r1, r3, r3, r2
 8001b1a:	0859      	lsrs	r1, r3, #1
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	440b      	add	r3, r1
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	2301      	movs	r3, #1
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	79ba      	ldrb	r2, [r7, #6]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff ff2f 	bl	8001994 <sa2_key_set>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	aaaaaaab 	.word	0xaaaaaaab

08001b44 <sa2_press_demo>:

void sa2_press_demo(uint8_t demo, sa2_note_state_t st) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	71fb      	strb	r3, [r7, #7]
 8001b50:	4613      	mov	r3, r2
 8001b52:	71bb      	strb	r3, [r7, #6]
	if (demo > 4) {demo = 4;}
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d901      	bls.n	8001b5e <sa2_press_demo+0x1a>
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	71fb      	strb	r3, [r7, #7]
	sa2_key_set(6, 1 << (demo + 3), st);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	3303      	adds	r3, #3
 8001b62:	2201      	movs	r2, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	79ba      	ldrb	r2, [r7, #6]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	2006      	movs	r0, #6
 8001b70:	f7ff ff10 	bl	8001994 <sa2_key_set>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <sa2_press_tempoUp>:

void sa2_press_tempoUp(sa2_note_state_t st) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
	sa2_key_set(4, 1 << 5, st);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2120      	movs	r1, #32
 8001b8c:	2004      	movs	r0, #4
 8001b8e:	f7ff ff01 	bl	8001994 <sa2_key_set>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <sa2_press_tempoDown>:

void sa2_press_tempoDown(sa2_note_state_t st) {
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
	sa2_key_set(5, 1 << 6, st);
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2140      	movs	r1, #64	; 0x40
 8001baa:	2005      	movs	r0, #5
 8001bac:	f7ff fef2 	bl	8001994 <sa2_key_set>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <sa2_press_volUp>:

void sa2_press_volUp(sa2_note_state_t st) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	sa2_key_set(4, 1 << 6, st);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2140      	movs	r1, #64	; 0x40
 8001bc8:	2004      	movs	r0, #4
 8001bca:	f7ff fee3 	bl	8001994 <sa2_key_set>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <sa2_press_volDown>:

void sa2_press_volDown(sa2_note_state_t st) {
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
	sa2_key_set(5, 1 << 7, st);
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	461a      	mov	r2, r3
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	2005      	movs	r0, #5
 8001be8:	f7ff fed4 	bl	8001994 <sa2_key_set>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <sa2_press_select>:

void sa2_press_select(sa2_note_state_t st) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	sa2_key_set(4, 1 << 7, st);
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	461a      	mov	r2, r3
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	2004      	movs	r0, #4
 8001c06:	f7ff fec5 	bl	8001994 <sa2_key_set>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <sa2_press_stop>:

void sa2_press_stop(sa2_note_state_t st) {
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
	sa2_key_set(5, 1 << 5, st);
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2120      	movs	r1, #32
 8001c22:	2005      	movs	r0, #5
 8001c24:	f7ff feb6 	bl	8001994 <sa2_key_set>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <si5351_init>:
#include "i2c.h"
#include "si5351_regmap.h"

uint8_t _si5351_initialized = 0;

si5351_err_t si5351_init(si5351CrystalLoad_t crystalLoad) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
	i2c_writeRegister8(SI5351_ADDR, SI5351_REG_OUTPUT_ENABLE_CONTROL, 0xFF); // Disable all clocks outputs
 8001c3a:	22ff      	movs	r2, #255	; 0xff
 8001c3c:	2103      	movs	r1, #3
 8001c3e:	2060      	movs	r0, #96	; 0x60
 8001c40:	f7fe fd8a 	bl	8000758 <i2c_writeRegister8>
	uint8_t sndBuf[9] = {SI5351_REG_CLK0_CONTROL, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80};
 8001c44:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <si5351_init+0x58>)
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c4c:	c303      	stmia	r3!, {r0, r1}
 8001c4e:	701a      	strb	r2, [r3, #0]
	i2c_write(SI5351_ADDR, 9, sndBuf); // Powerdown all clocks
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	461a      	mov	r2, r3
 8001c56:	2109      	movs	r1, #9
 8001c58:	2060      	movs	r0, #96	; 0x60
 8001c5a:	f7fe fc35 	bl	80004c8 <i2c_write>
	i2c_writeRegister8(SI5351_ADDR, SI5351_REG_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	461a      	mov	r2, r3
 8001c62:	21b7      	movs	r1, #183	; 0xb7
 8001c64:	2060      	movs	r0, #96	; 0x60
 8001c66:	f7fe fd77 	bl	8000758 <i2c_writeRegister8>

	SI5351_ASSERT(i2c_get_error() == 0, SI5351_ERR_I2C);
 8001c6a:	f7fe fc21 	bl	80004b0 <i2c_get_error>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <si5351_init+0x48>
 8001c74:	2303      	movs	r3, #3
 8001c76:	e003      	b.n	8001c80 <si5351_init+0x50>

	_si5351_initialized = 1;
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <si5351_init+0x5c>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
	return SI5351_ERR_NONE;
 8001c7e:	2300      	movs	r3, #0
};
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	08002160 	.word	0x08002160
 8001c8c:	20000045 	.word	0x20000045

08001c90 <si5351_setupPLL>:

si5351_err_t si5351_setupPLL(si5351PLL_t pll, uint8_t mult, uint32_t num, uint32_t denom) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60ba      	str	r2, [r7, #8]
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	73bb      	strb	r3, [r7, #14]
	   * P2 register is a 20-bit value using the following formula:
	   * 	P2[19:0] = 128 * num - denom * floor(128*(num/denom))
	   * P3 register is a 20-bit value using the following formula:
	   * 	P3[19:0] = denom
	   */
	SI5351_ASSERT(_si5351_initialized != 0, SI5351_ERR_NOTINIT);
 8001ca2:	4b59      	ldr	r3, [pc, #356]	; (8001e08 <si5351_setupPLL+0x178>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <si5351_setupPLL+0x1e>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0a7      	b.n	8001dfe <si5351_setupPLL+0x16e>
	SI5351_ASSERT((mult > 14) && (mult < 91), SI5351_ERR_INVALIDPARR);
 8001cae:	7bbb      	ldrb	r3, [r7, #14]
 8001cb0:	2b0e      	cmp	r3, #14
 8001cb2:	d902      	bls.n	8001cba <si5351_setupPLL+0x2a>
 8001cb4:	7bbb      	ldrb	r3, [r7, #14]
 8001cb6:	2b5a      	cmp	r3, #90	; 0x5a
 8001cb8:	d901      	bls.n	8001cbe <si5351_setupPLL+0x2e>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e09f      	b.n	8001dfe <si5351_setupPLL+0x16e>
	SI5351_ASSERT(denom != 0, SI5351_ERR_INVALIDPARR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <si5351_setupPLL+0x38>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e09a      	b.n	8001dfe <si5351_setupPLL+0x16e>
	SI5351_ASSERT(num <= 0xFFFFF, SI5351_ERR_INVALIDPARR);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cce:	d301      	bcc.n	8001cd4 <si5351_setupPLL+0x44>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e094      	b.n	8001dfe <si5351_setupPLL+0x16e>
	SI5351_ASSERT(denom <= 0xFFFFF, SI5351_ERR_INVALIDPARR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cda:	d301      	bcc.n	8001ce0 <si5351_setupPLL+0x50>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e08e      	b.n	8001dfe <si5351_setupPLL+0x16e>

	uint32_t P1; /* PLL config register P1 */
	uint32_t P2; /* PLL config register P2 */
	uint32_t P3; /* PLL config register P3 */

	if(num == 0) {
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d108      	bne.n	8001cf8 <si5351_setupPLL+0x68>
		P1 = 128 * mult - 512;
 8001ce6:	7bbb      	ldrb	r3, [r7, #14]
 8001ce8:	3b04      	subs	r3, #4
 8001cea:	01db      	lsls	r3, r3, #7
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
		P2 = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
		P3 = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	e02c      	b.n	8001d52 <si5351_setupPLL+0xc2>
	} else if (denom == 1) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d111      	bne.n	8001d22 <si5351_setupPLL+0x92>
		P1 = 128 * mult + 128 * num - 512;
 8001cfe:	7bbb      	ldrb	r3, [r7, #14]
 8001d00:	01db      	lsls	r3, r3, #7
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	01db      	lsls	r3, r3, #7
 8001d08:	4413      	add	r3, r2
 8001d0a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
		P2 = 128 * num - 128;
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001d16:	3b01      	subs	r3, #1
 8001d18:	01db      	lsls	r3, r3, #7
 8001d1a:	623b      	str	r3, [r7, #32]
		P3 = 1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	e017      	b.n	8001d52 <si5351_setupPLL+0xc2>
	} else {
		P1 = (uint32_t)(128 * mult + (128 * num) / denom - 512);
 8001d22:	7bbb      	ldrb	r3, [r7, #14]
 8001d24:	01db      	lsls	r3, r3, #7
 8001d26:	4619      	mov	r1, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	01da      	lsls	r2, r3, #7
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	440b      	add	r3, r1
 8001d34:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
		P2 = (uint32_t)(128 * num - denom * ((num * 128) / denom));
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	01db      	lsls	r3, r3, #7
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	fb01 f202 	mul.w	r2, r1, r2
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	623b      	str	r3, [r7, #32]
		P3 = denom;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	61fb      	str	r3, [r7, #28]
	}

	uint8_t sndBuf[9] = {((pll == SI5351_PLL_A) ? SI5351_REG_PLLA_P0 : SI5351_REG_PLLB_P0),
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <si5351_setupPLL+0xcc>
 8001d58:	231a      	movs	r3, #26
 8001d5a:	e000      	b.n	8001d5e <si5351_setupPLL+0xce>
 8001d5c:	2322      	movs	r3, #34	; 0x22
 8001d5e:	743b      	strb	r3, [r7, #16]
		(P3 & 0x0000FF00) >> 8,
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	0a1b      	lsrs	r3, r3, #8
	uint8_t sndBuf[9] = {((pll == SI5351_PLL_A) ? SI5351_REG_PLLA_P0 : SI5351_REG_PLLB_P0),
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	747b      	strb	r3, [r7, #17]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	74bb      	strb	r3, [r7, #18]
		(P3 & 0x000000FF),
		(P1 & 0x00030000) >> 16,
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	b2db      	uxtb	r3, r3
	uint8_t sndBuf[9] = {((pll == SI5351_PLL_A) ? SI5351_REG_PLLA_P0 : SI5351_REG_PLLB_P0),
 8001d7a:	74fb      	strb	r3, [r7, #19]
		(P1 & 0x0000FF00) >> 8,
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	0a1b      	lsrs	r3, r3, #8
	uint8_t sndBuf[9] = {((pll == SI5351_PLL_A) ? SI5351_REG_PLLA_P0 : SI5351_REG_PLLB_P0),
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	753b      	strb	r3, [r7, #20]
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	757b      	strb	r3, [r7, #21]
		(P1 & 0x000000FF),
		((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16),
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	0b1b      	lsrs	r3, r3, #12
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f023 030f 	bic.w	r3, r3, #15
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b2db      	uxtb	r3, r3
	uint8_t sndBuf[9] = {((pll == SI5351_PLL_A) ? SI5351_REG_PLLA_P0 : SI5351_REG_PLLB_P0),
 8001da6:	75bb      	strb	r3, [r7, #22]
		(P2 & 0x0000FF00) >> 8,
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	0a1b      	lsrs	r3, r3, #8
	uint8_t sndBuf[9] = {((pll == SI5351_PLL_A) ? SI5351_REG_PLLA_P0 : SI5351_REG_PLLB_P0),
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	75fb      	strb	r3, [r7, #23]
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	763b      	strb	r3, [r7, #24]
		(P2 & 0x000000FF)
	};

	i2c_write(SI5351_ADDR, 9, sndBuf);
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2109      	movs	r1, #9
 8001dbe:	2060      	movs	r0, #96	; 0x60
 8001dc0:	f7fe fb82 	bl	80004c8 <i2c_write>
	for(uint16_t i = 0; i < 0x200; i++) {}
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	837b      	strh	r3, [r7, #26]
 8001dc8:	e002      	b.n	8001dd0 <si5351_setupPLL+0x140>
 8001dca:	8b7b      	ldrh	r3, [r7, #26]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	837b      	strh	r3, [r7, #26]
 8001dd0:	8b7b      	ldrh	r3, [r7, #26]
 8001dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd6:	d3f8      	bcc.n	8001dca <si5351_setupPLL+0x13a>
	i2c_writeRegister8(SI5351_ADDR, SI5351_REG_PLL_RESET, (pll == SI5351_PLL_A) ? (1 << 5) : (1 << 7));
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <si5351_setupPLL+0x152>
 8001dde:	2320      	movs	r3, #32
 8001de0:	e000      	b.n	8001de4 <si5351_setupPLL+0x154>
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	461a      	mov	r2, r3
 8001de6:	21b1      	movs	r1, #177	; 0xb1
 8001de8:	2060      	movs	r0, #96	; 0x60
 8001dea:	f7fe fcb5 	bl	8000758 <i2c_writeRegister8>
	SI5351_ASSERT(i2c_get_error() == 0, SI5351_ERR_I2C);
 8001dee:	f7fe fb5f 	bl	80004b0 <i2c_get_error>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <si5351_setupPLL+0x16c>
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <si5351_setupPLL+0x16e>
	return SI5351_ERR_NONE;
 8001dfc:	2300      	movs	r3, #0
};
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000045 	.word	0x20000045

08001e0c <si5351_setMultisynthControl>:

si5351_err_t si5351_setMultisynthControl(uint8_t output, si5351MultisynthEn_t en, si5351PLL_t pllsource, si5351MultisynthInv_t inv, si5351MultisynthMode_t mode, si5351OutputDrive_t drv) {
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4604      	mov	r4, r0
 8001e14:	4608      	mov	r0, r1
 8001e16:	4611      	mov	r1, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	71fb      	strb	r3, [r7, #7]
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71bb      	strb	r3, [r7, #6]
 8001e22:	460b      	mov	r3, r1
 8001e24:	717b      	strb	r3, [r7, #5]
 8001e26:	4613      	mov	r3, r2
 8001e28:	713b      	strb	r3, [r7, #4]
	SI5351_ASSERT(_si5351_initialized != 0, SI5351_ERR_NOTINIT);
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <si5351_setMultisynthControl+0x7c>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <si5351_setMultisynthControl+0x2a>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e023      	b.n	8001e7e <si5351_setMultisynthControl+0x72>
	SI5351_ASSERT(output < 3, SI5351_ERR_INVALIDPARR);
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <si5351_setMultisynthControl+0x34>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e01e      	b.n	8001e7e <si5351_setMultisynthControl+0x72>
	i2c_writeRegister8(SI5351_ADDR, SI5351_REG_CLK0_CONTROL + output, 0b00001100 | en | pllsource | inv | mode | drv);
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	3310      	adds	r3, #16
 8001e44:	b2d9      	uxtb	r1, r3
 8001e46:	79ba      	ldrb	r2, [r7, #6]
 8001e48:	797b      	ldrb	r3, [r7, #5]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	793b      	ldrb	r3, [r7, #4]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	7e3b      	ldrb	r3, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	7f3b      	ldrb	r3, [r7, #28]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f043 030c 	orr.w	r3, r3, #12
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	2060      	movs	r0, #96	; 0x60
 8001e6a:	f7fe fc75 	bl	8000758 <i2c_writeRegister8>
	SI5351_ASSERT(i2c_get_error() == 0, SI5351_ERR_I2C);
 8001e6e:	f7fe fb1f 	bl	80004b0 <i2c_get_error>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <si5351_setMultisynthControl+0x70>
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <si5351_setMultisynthControl+0x72>
	return SI5351_ERR_NONE;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd90      	pop	{r4, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000045 	.word	0x20000045

08001e8c <si5351_setupMultisynth>:

si5351_err_t si5351_setupMultisynth(uint8_t output, uint32_t div, uint32_t num, uint32_t denom, si5351RDiv_t rdiv) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4603      	mov	r3, r0
 8001e9a:	73fb      	strb	r3, [r7, #15]
	   * 	P2[19:0] = 128 * b - c * floor(128*(b/c))
	   * P3 register is a 20-bit value using the following formula:
	   * 	P3[19:0] = c
	   */

	SI5351_ASSERT(_si5351_initialized != 0, SI5351_ERR_NOTINIT);
 8001e9c:	4b53      	ldr	r3, [pc, #332]	; (8001fec <si5351_setupMultisynth+0x160>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <si5351_setupMultisynth+0x1c>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e09d      	b.n	8001fe4 <si5351_setupMultisynth+0x158>
	SI5351_ASSERT(div > 3, SI5351_ERR_INVALIDPARR);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d801      	bhi.n	8001eb2 <si5351_setupMultisynth+0x26>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e098      	b.n	8001fe4 <si5351_setupMultisynth+0x158>
	SI5351_ASSERT(div < 901, SI5351_ERR_INVALIDPARR);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001eb8:	d901      	bls.n	8001ebe <si5351_setupMultisynth+0x32>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e092      	b.n	8001fe4 <si5351_setupMultisynth+0x158>
	SI5351_ASSERT(denom != 0, SI5351_ERR_INVALIDPARR);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <si5351_setupMultisynth+0x3c>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e08d      	b.n	8001fe4 <si5351_setupMultisynth+0x158>
	SI5351_ASSERT(num <= 0xFFFFF, SI5351_ERR_INVALIDPARR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ece:	d301      	bcc.n	8001ed4 <si5351_setupMultisynth+0x48>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e087      	b.n	8001fe4 <si5351_setupMultisynth+0x158>
	SI5351_ASSERT(denom <= 0xFFFFF, SI5351_ERR_INVALIDPARR);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eda:	d301      	bcc.n	8001ee0 <si5351_setupMultisynth+0x54>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e081      	b.n	8001fe4 <si5351_setupMultisynth+0x158>
	SI5351_ASSERT(output < 3, SI5351_ERR_INVALIDPARR);
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <si5351_setupMultisynth+0x5e>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e07c      	b.n	8001fe4 <si5351_setupMultisynth+0x158>

	uint32_t P1; /* PLL config register P1 */
	uint32_t P2; /* PLL config register P2 */
	uint32_t P3; /* PLL config register P3 */

	if(num == 0) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <si5351_setupMultisynth+0x7a>
		P1 = 128 * div - 512;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	01db      	lsls	r3, r3, #7
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
		P2 = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
		P3 = 1;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	e02a      	b.n	8001f5c <si5351_setupMultisynth+0xd0>
	} else if (denom == 1) {
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d110      	bne.n	8001f2e <si5351_setupMultisynth+0xa2>
		P1 = 128 * div + 128 * num - 512;
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001f16:	3b04      	subs	r3, #4
 8001f18:	01db      	lsls	r3, r3, #7
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
		P2 = 128 * num - 128;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001f22:	3b01      	subs	r3, #1
 8001f24:	01db      	lsls	r3, r3, #7
 8001f26:	623b      	str	r3, [r7, #32]
		P3 = 1;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	e016      	b.n	8001f5c <si5351_setupMultisynth+0xd0>
	} else {
		P1 = (uint32_t)(128 * div + (128 * num) / denom - 512);
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	01da      	lsls	r2, r3, #7
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	01d9      	lsls	r1, r3, #7
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
		P2 = (uint32_t)(128 * num - denom * ((num * 128) / denom));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	01db      	lsls	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f4e:	6839      	ldr	r1, [r7, #0]
 8001f50:	fb01 f202 	mul.w	r2, r1, r2
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	623b      	str	r3, [r7, #32]
		P3 = denom;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	61fb      	str	r3, [r7, #28]
	}

	uint8_t sndBuf[9] = {SI5351_REG_MULTISYNTH0_P0 + 8 * output,
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	332a      	adds	r3, #42	; 0x2a
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	743b      	strb	r3, [r7, #16]
		(P3 & 0x0000FF00) >> 8,
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
	uint8_t sndBuf[9] = {SI5351_REG_MULTISYNTH0_P0 + 8 * output,
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	747b      	strb	r3, [r7, #17]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	74bb      	strb	r3, [r7, #18]
		(P3 & 0x000000FF),
		((P1 & 0x00030000) >> 16) | rdiv,
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f86:	4313      	orrs	r3, r2
 8001f88:	b2db      	uxtb	r3, r3
	uint8_t sndBuf[9] = {SI5351_REG_MULTISYNTH0_P0 + 8 * output,
 8001f8a:	74fb      	strb	r3, [r7, #19]
		(P1 & 0x0000FF00) >> 8,
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	0a1b      	lsrs	r3, r3, #8
	uint8_t sndBuf[9] = {SI5351_REG_MULTISYNTH0_P0 + 8 * output,
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	753b      	strb	r3, [r7, #20]
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	757b      	strb	r3, [r7, #21]
		(P1 & 0x000000FF),
		((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16),
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	0b1b      	lsrs	r3, r3, #12
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f023 030f 	bic.w	r3, r3, #15
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b2db      	uxtb	r3, r3
	uint8_t sndBuf[9] = {SI5351_REG_MULTISYNTH0_P0 + 8 * output,
 8001fb6:	75bb      	strb	r3, [r7, #22]
		(P2 & 0x0000FF00) >> 8,
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	0a1b      	lsrs	r3, r3, #8
	uint8_t sndBuf[9] = {SI5351_REG_MULTISYNTH0_P0 + 8 * output,
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	75fb      	strb	r3, [r7, #23]
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	763b      	strb	r3, [r7, #24]
		(P2 & 0x000000FF)
	};

	i2c_write(SI5351_ADDR, 9, sndBuf);
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2109      	movs	r1, #9
 8001fce:	2060      	movs	r0, #96	; 0x60
 8001fd0:	f7fe fa7a 	bl	80004c8 <i2c_write>
	SI5351_ASSERT(i2c_get_error() == 0, SI5351_ERR_I2C);
 8001fd4:	f7fe fa6c 	bl	80004b0 <i2c_get_error>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <si5351_setupMultisynth+0x156>
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e000      	b.n	8001fe4 <si5351_setupMultisynth+0x158>
	return SI5351_ERR_NONE;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000045 	.word	0x20000045

08001ff0 <si5351_enableOutput>:

si5351_err_t si5351_enableOutput(uint8_t output) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
	SI5351_ASSERT(_si5351_initialized != 0, SI5351_ERR_NOTINIT);
 8001ffa:	4b17      	ldr	r3, [pc, #92]	; (8002058 <si5351_enableOutput+0x68>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <si5351_enableOutput+0x16>
 8002002:	2301      	movs	r3, #1
 8002004:	e024      	b.n	8002050 <si5351_enableOutput+0x60>
	SI5351_ASSERT(output < 3, SI5351_ERR_INVALIDPARR);
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <si5351_enableOutput+0x20>
 800200c:	2302      	movs	r3, #2
 800200e:	e01f      	b.n	8002050 <si5351_enableOutput+0x60>
	uint8_t reg = i2c_readRegister8(SI5351_ADDR, 3);
 8002010:	2103      	movs	r1, #3
 8002012:	2060      	movs	r0, #96	; 0x60
 8002014:	f7fe fb80 	bl	8000718 <i2c_readRegister8>
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]
	reg &= ~(1 << output);
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	2201      	movs	r2, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	b25b      	sxtb	r3, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	b25a      	sxtb	r2, r3
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4013      	ands	r3, r2
 8002030:	b25b      	sxtb	r3, r3
 8002032:	73fb      	strb	r3, [r7, #15]
	i2c_writeRegister8(SI5351_ADDR, 3, reg);
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	461a      	mov	r2, r3
 8002038:	2103      	movs	r1, #3
 800203a:	2060      	movs	r0, #96	; 0x60
 800203c:	f7fe fb8c 	bl	8000758 <i2c_writeRegister8>
	SI5351_ASSERT(i2c_get_error() == 0, SI5351_ERR_I2C);
 8002040:	f7fe fa36 	bl	80004b0 <i2c_get_error>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <si5351_enableOutput+0x5e>
 800204a:	2303      	movs	r3, #3
 800204c:	e000      	b.n	8002050 <si5351_enableOutput+0x60>
	return SI5351_ERR_NONE;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000045 	.word	0x20000045

0800205c <NMI_Handler>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_it.h"

void NMI_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  while (1)
 8002060:	e7fe      	b.n	8002060 <NMI_Handler+0x4>

08002062 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  while (1)
 8002066:	e7fe      	b.n	8002066 <HardFault_Handler+0x4>

08002068 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  while (1)
 800206c:	e7fe      	b.n	800206c <MemManage_Handler+0x4>

0800206e <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  while (1)
 8002072:	e7fe      	b.n	8002072 <BusFault_Handler+0x4>

08002074 <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  while (1)
 8002078:	e7fe      	b.n	8002078 <UsageFault_Handler+0x4>

0800207a <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <PendSV_Handler>:


void PendSV_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <SysTick_Handler>:

void SysTick_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
	...

080020ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020b6:	490d      	ldr	r1, [pc, #52]	; (80020ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <LoopForever+0xe>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020bc:	e002      	b.n	80020c4 <LoopCopyDataInit>

080020be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c2:	3304      	adds	r3, #4

080020c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c8:	d3f9      	bcc.n	80020be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020cc:	4c0a      	ldr	r4, [pc, #40]	; (80020f8 <LoopForever+0x16>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d0:	e001      	b.n	80020d6 <LoopFillZerobss>

080020d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d4:	3204      	adds	r2, #4

080020d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d8:	d3fb      	bcc.n	80020d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020da:	f000 f811 	bl	8002100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020de:	f7fe fc33 	bl	8000948 <main>

080020e2 <LoopForever>:

LoopForever:
    b LoopForever
 80020e2:	e7fe      	b.n	80020e2 <LoopForever>
  ldr   r0, =_estack
 80020e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ec:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80020f0:	08002580 	.word	0x08002580
  ldr r2, =_sbss
 80020f4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80020f8:	20000048 	.word	0x20000048

080020fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC1_2_IRQHandler>
	...

08002100 <__libc_init_array>:
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	2500      	movs	r5, #0
 8002104:	4e0c      	ldr	r6, [pc, #48]	; (8002138 <__libc_init_array+0x38>)
 8002106:	4c0d      	ldr	r4, [pc, #52]	; (800213c <__libc_init_array+0x3c>)
 8002108:	1ba4      	subs	r4, r4, r6
 800210a:	10a4      	asrs	r4, r4, #2
 800210c:	42a5      	cmp	r5, r4
 800210e:	d109      	bne.n	8002124 <__libc_init_array+0x24>
 8002110:	f000 f81a 	bl	8002148 <_init>
 8002114:	2500      	movs	r5, #0
 8002116:	4e0a      	ldr	r6, [pc, #40]	; (8002140 <__libc_init_array+0x40>)
 8002118:	4c0a      	ldr	r4, [pc, #40]	; (8002144 <__libc_init_array+0x44>)
 800211a:	1ba4      	subs	r4, r4, r6
 800211c:	10a4      	asrs	r4, r4, #2
 800211e:	42a5      	cmp	r5, r4
 8002120:	d105      	bne.n	800212e <__libc_init_array+0x2e>
 8002122:	bd70      	pop	{r4, r5, r6, pc}
 8002124:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002128:	4798      	blx	r3
 800212a:	3501      	adds	r5, #1
 800212c:	e7ee      	b.n	800210c <__libc_init_array+0xc>
 800212e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002132:	4798      	blx	r3
 8002134:	3501      	adds	r5, #1
 8002136:	e7f2      	b.n	800211e <__libc_init_array+0x1e>
 8002138:	08002578 	.word	0x08002578
 800213c:	08002578 	.word	0x08002578
 8002140:	08002578 	.word	0x08002578
 8002144:	0800257c 	.word	0x0800257c

08002148 <_init>:
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214a:	bf00      	nop
 800214c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214e:	bc08      	pop	{r3}
 8002150:	469e      	mov	lr, r3
 8002152:	4770      	bx	lr

08002154 <_fini>:
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	bf00      	nop
 8002158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215a:	bc08      	pop	{r3}
 800215c:	469e      	mov	lr, r3
 800215e:	4770      	bx	lr
